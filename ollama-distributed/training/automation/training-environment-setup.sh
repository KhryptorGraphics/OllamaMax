#!/bin/bash
# training/automation/training-environment-setup.sh
# Comprehensive training environment automation for Ollama Distributed

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
TRAINING_DIR="$PROJECT_ROOT/training"
BASE_DIR="${BASE_DIR:-$HOME/.ollama-distributed-training}"
LOG_FILE="$BASE_DIR/logs/setup.log"

# Global variables
SETUP_MODE="full"
VERBOSE=false
DRY_RUN=false
FORCE_OVERWRITE=false

# Helper Functions
print_banner() {
    local text="$1"
    local width=80
    local padding=$(( (width - ${#text}) / 2 ))
    
    echo -e "\n${BLUE}$(printf '═%.0s' $(seq 1 $width))${NC}"
    echo -e "${BLUE}$(printf '%*s' $padding)${WHITE}$text${BLUE}$(printf '%*s' $padding)${NC}"
    echo -e "${BLUE}$(printf '═%.0s' $(seq 1 $width))${NC}\n"
}

print_section() {
    echo -e "\n${CYAN}▶ $1${NC}"
    echo -e "${CYAN}$(printf '─%.0s' $(seq 1 50))${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
    log_event "SUCCESS: $1"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
    log_event "ERROR: $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
    log_event "WARNING: $1"
}

print_info() {
    echo -e "${CYAN}ℹ️  $1${NC}"
    if $VERBOSE; then
        log_event "INFO: $1"
    fi
}

log_event() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

confirm_action() {
    local message="$1"
    local default="${2:-n}"
    
    if $DRY_RUN; then
        print_info "[DRY RUN] Would execute: $message"
        return 0
    fi
    
    if $FORCE_OVERWRITE; then
        return 0
    fi
    
    echo -e "${YELLOW}$message${NC}"
    read -p "Continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        return 1
    fi
    return 0
}

# Environment Setup Functions

setup_directory_structure() {
    print_section "Setting Up Directory Structure"
    
    local directories=(
        "$BASE_DIR"
        "$BASE_DIR/profiles"
        "$BASE_DIR/data"
        "$BASE_DIR/logs"
        "$BASE_DIR/scripts"
        "$BASE_DIR/exercises"
        "$BASE_DIR/solutions"
        "$BASE_DIR/certificates"
        "$BASE_DIR/backup"
        "$BASE_DIR/tools"
    )
    
    for dir in "${directories[@]}"; do
        if [[ ! -d "$dir" ]]; then
            if ! $DRY_RUN; then
                mkdir -p "$dir"
                chmod 755 "$dir"
            fi
            print_success "Created directory: $dir"
        else
            print_info "Directory exists: $dir"
        fi
    done
    
    # Create logs directory and initialize log file
    if ! $DRY_RUN; then
        touch "$LOG_FILE"
        chmod 644 "$LOG_FILE"
        log_event "Training environment setup started"
    fi
}

setup_configuration_profiles() {
    print_section "Setting Up Configuration Profiles"
    
    # Development profile
    local dev_profile="$BASE_DIR/profiles/development.yaml"
    if [[ ! -f "$dev_profile" ]] || $FORCE_OVERWRITE; then
        if ! $DRY_RUN; then
            cat > "$dev_profile" << 'EOF'
# Development Configuration Profile
# Auto-generated by training environment setup

name: development
description: "Development environment for Ollama Distributed training"
environment: development

api:
  listen: "127.0.0.1:8080"
  debug: true
  timeout: 30s
  cors:
    enabled: true
    origins: ["*"]
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    headers: ["*"]

p2p:
  listen: "127.0.0.1:4001"
  bootstrap: []
  protocol: tcp
  discovery:
    method: mdns
    interval: 30

web:
  listen: "127.0.0.1:8081"
  enable_auth: false
  static_dir: "./web/static"
  theme: default
  title: "Ollama Distributed - Training Development"

storage:
  data_dir: "./dev-data"
  models_dir: "./dev-data/models"
  cache_dir: "./dev-data/cache"
  temp_dir: "./dev-data/temp"
  max_size: "10GB"
  cleanup: true

logging:
  level: debug
  output: both
  file: "./dev-data/logs/ollama-distributed.log"
  max_size: "100MB"
  max_backups: 5
  max_age: 7
  compress: true

performance:
  monitoring_enabled: true
  metrics_interval: 5
  optimization_enabled: false
  profiler_enabled: true
  memory_limit: "2GB"
  cpu_limit: "2.0"

consensus:
  data_dir: "./dev-data/consensus"
  bootstrap: true
  bind_addr: "127.0.0.1:7000"
  election_timeout: 1s
  heartbeat_time: 100ms
  max_log_entries: 10000

scheduler:
  algorithm: round_robin
  load_balancing: cpu_aware
  worker_count: 4
  queue_size: 100

security:
  enable_auth: false
  jwt:
    secret: "dev-training-secret-key"
    expiration: 24h
    algorithm: HS256

metadata:
  created_by: training-environment-setup
  created_at: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
  purpose: development-training
  tags: [development, training, local]
EOF
        fi
        print_success "Created development configuration profile"
    else
        print_info "Development profile already exists"
    fi
    
    # Testing profile
    local test_profile="$BASE_DIR/profiles/testing.yaml"
    if [[ ! -f "$test_profile" ]] || $FORCE_OVERWRITE; then
        if ! $DRY_RUN; then
            cat > "$test_profile" << 'EOF'
# Testing Configuration Profile
# Auto-generated by training environment setup

name: testing
description: "Testing environment for validation and exercises"
environment: testing

api:
  listen: "127.0.0.1:9080"
  debug: false
  timeout: 15s
  cors:
    enabled: true
    origins: ["http://localhost:*"]

p2p:
  listen: "127.0.0.1:4002"
  bootstrap: []

web:
  listen: "127.0.0.1:9081"
  enable_auth: true
  title: "Ollama Distributed - Training Testing"

storage:
  data_dir: "./test-data"
  models_dir: "./test-data/models"
  max_size: "1GB"
  cleanup: true

logging:
  level: info
  output: file
  file: "./test-data/logs/test.log"
  max_size: "50MB"
  max_backups: 3

performance:
  monitoring_enabled: true
  metrics_interval: 10
  optimization_enabled: true
  profiler_enabled: false

security:
  enable_auth: true
  jwt:
    secret: "test-training-secret-key"
    expiration: 1h
    algorithm: HS256

metadata:
  created_by: training-environment-setup
  created_at: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
  purpose: testing-validation
  tags: [testing, training, validation]
EOF
        fi
        print_success "Created testing configuration profile"
    else
        print_info "Testing profile already exists"
    fi
    
    # Multi-node cluster profiles
    for node_num in {2..3}; do
        local node_profile="$BASE_DIR/profiles/node${node_num}.yaml"
        if [[ ! -f "$node_profile" ]] || $FORCE_OVERWRITE; then
            if ! $DRY_RUN; then
                local api_port=$((8080 + (node_num - 1) * 2))
                local web_port=$((8081 + (node_num - 1) * 2))
                local p2p_port=$((4001 + (node_num - 1)))
                local consensus_port=$((7000 + (node_num - 1)))
                
                cat > "$node_profile" << EOF
# Node ${node_num} Configuration Profile
# Auto-generated for multi-node cluster training

name: node${node_num}
description: "Node ${node_num} for multi-node cluster training"
environment: development

api:
  listen: "127.0.0.1:${api_port}"
  debug: true

p2p:
  listen: "127.0.0.1:${p2p_port}"
  bootstrap: ["127.0.0.1:4001"]

web:
  listen: "127.0.0.1:${web_port}"
  enable_auth: false
  title: "Ollama Distributed - Node ${node_num}"

storage:
  data_dir: "./node${node_num}-data"
  models_dir: "./node${node_num}-data/models"

logging:
  level: debug
  output: both
  file: "./node${node_num}-data/logs/node${node_num}.log"

consensus:
  data_dir: "./node${node_num}-data/consensus"
  bootstrap: false
  bind_addr: "127.0.0.1:${consensus_port}"

metadata:
  created_by: training-environment-setup
  created_at: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
  purpose: multi-node-training
  node_number: ${node_num}
EOF
            fi
            print_success "Created node${node_num} configuration profile"
        fi
    done
}

setup_training_scripts() {
    print_section "Setting Up Training Scripts"
    
    # Training aliases script
    local aliases_script="$BASE_DIR/scripts/training-aliases.sh"
    if ! $DRY_RUN; then
        cat > "$aliases_script" << EOF
#!/bin/bash
# Training Environment Aliases
# Source this file to load helpful aliases

export OLLAMA_TRAINING_DIR="$BASE_DIR"
export OLLAMA_PROJECT_DIR="$PROJECT_ROOT"
export OLLAMA_BINARY="\$OLLAMA_PROJECT_DIR/bin/ollama-distributed"

# Basic aliases
alias od="\$OLLAMA_BINARY"
alias od-help="\$OLLAMA_BINARY --help"
alias od-version="\$OLLAMA_BINARY --version"

# Profile-based aliases
alias od-dev="\$OLLAMA_BINARY start --config \$OLLAMA_TRAINING_DIR/profiles/development.yaml"
alias od-test="\$OLLAMA_BINARY start --config \$OLLAMA_TRAINING_DIR/profiles/testing.yaml"
alias od-node2="\$OLLAMA_BINARY start --config \$OLLAMA_TRAINING_DIR/profiles/node2.yaml"
alias od-node3="\$OLLAMA_BINARY start --config \$OLLAMA_TRAINING_DIR/profiles/node3.yaml"

# Status and monitoring aliases
alias od-status="\$OLLAMA_BINARY status"
alias od-health="curl -s http://127.0.0.1:8080/health | jq ."
alias od-cluster="curl -s http://127.0.0.1:8080/api/distributed/status | jq ."
alias od-metrics="curl -s http://127.0.0.1:8080/api/distributed/metrics | jq ."
alias od-nodes="curl -s http://127.0.0.1:8080/api/distributed/nodes | jq ."

# Log viewing aliases
alias od-logs="tail -f ./dev-data/logs/ollama-distributed.log"
alias od-logs-dev="tail -f ./dev-data/logs/ollama-distributed.log"
alias od-logs-test="tail -f ./test-data/logs/test.log"

# Training tool aliases
alias od-monitor="\$OLLAMA_TRAINING_DIR/../code-examples/03-operations/health-monitoring-dashboard.sh"
alias od-validate="\$OLLAMA_TRAINING_DIR/../code-examples/05-validation-testing/training-validation-suite"

# Development aliases
alias od-build="cd \$OLLAMA_PROJECT_DIR && go build -o bin/ollama-distributed ./cmd/node"
alias od-clean="rm -rf ./dev-data ./test-data ./node*-data"

# Multi-node cluster aliases
alias od-cluster-start="\$OLLAMA_TRAINING_DIR/scripts/start-cluster.sh"
alias od-cluster-stop="\$OLLAMA_TRAINING_DIR/scripts/stop-cluster.sh"
alias od-cluster-status="\$OLLAMA_TRAINING_DIR/scripts/cluster-status.sh"

echo "🎓 Ollama Distributed Training Environment Loaded"
echo "📍 Training Directory: \$OLLAMA_TRAINING_DIR"
echo "📍 Project Directory: \$OLLAMA_PROJECT_DIR"
echo ""
echo "🔧 Available aliases:"
echo "   od            - Main binary"
echo "   od-dev        - Start development node"
echo "   od-test       - Start testing node"
echo "   od-status     - Show node status"
echo "   od-health     - Check API health"
echo "   od-cluster    - Check cluster status"
echo "   od-monitor    - Health monitoring dashboard"
echo "   od-validate   - Run validation suite"
echo ""
echo "📚 Multi-node cluster:"
echo "   od-cluster-start  - Start 3-node cluster"
echo "   od-cluster-stop   - Stop all cluster nodes"
echo "   od-cluster-status - Check cluster health"
echo ""
EOF
        chmod +x "$aliases_script"
    fi
    print_success "Created training aliases script"
    
    # Cluster management scripts
    create_cluster_management_scripts
    
    # Exercise runner script
    create_exercise_runner_script
    
    # Validation automation script
    create_validation_automation_script
}

create_cluster_management_scripts() {
    # Start cluster script
    local start_script="$BASE_DIR/scripts/start-cluster.sh"
    if ! $DRY_RUN; then
        cat > "$start_script" << 'EOF'
#!/bin/bash
# Start multi-node cluster for training

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(cd "$SCRIPT_DIR/../../.." && pwd)"
BINARY="$PROJECT_DIR/bin/ollama-distributed"
PROFILES_DIR="$(dirname "$SCRIPT_DIR")/profiles"

if [[ ! -x "$BINARY" ]]; then
    echo "❌ Binary not found: $BINARY"
    echo "Run: cd $PROJECT_DIR && go build -o bin/ollama-distributed ./cmd/node"
    exit 1
fi

echo "🚀 Starting Ollama Distributed Training Cluster"
echo "=============================================="

# Start node 1 (bootstrap node)
echo "Starting Node 1 (Bootstrap)..."
$BINARY start --config "$PROFILES_DIR/development.yaml" &
NODE1_PID=$!
echo "Node 1 PID: $NODE1_PID"
echo $NODE1_PID > /tmp/od-node1.pid

sleep 5

# Start node 2
echo "Starting Node 2..."
$BINARY start --config "$PROFILES_DIR/node2.yaml" &
NODE2_PID=$!
echo "Node 2 PID: $NODE2_PID"
echo $NODE2_PID > /tmp/od-node2.pid

sleep 3

# Start node 3
echo "Starting Node 3..."
$BINARY start --config "$PROFILES_DIR/node3.yaml" &
NODE3_PID=$!
echo "Node 3 PID: $NODE3_PID"
echo $NODE3_PID > /tmp/od-node3.pid

echo ""
echo "✅ Cluster started successfully!"
echo "Nodes:"
echo "  Node 1: http://127.0.0.1:8080 (API), http://127.0.0.1:8081 (Web)"
echo "  Node 2: http://127.0.0.1:8082 (API), http://127.0.0.1:8083 (Web)"
echo "  Node 3: http://127.0.0.1:8084 (API), http://127.0.0.1:8085 (Web)"
echo ""
echo "Wait 10 seconds for cluster formation, then run:"
echo "  ./cluster-status.sh"
echo ""
echo "To stop the cluster:"
echo "  ./stop-cluster.sh"
EOF
        chmod +x "$start_script"
    fi
    
    # Stop cluster script
    local stop_script="$BASE_DIR/scripts/stop-cluster.sh"
    if ! $DRY_RUN; then
        cat > "$stop_script" << 'EOF'
#!/bin/bash
# Stop multi-node cluster

echo "🛑 Stopping Ollama Distributed Training Cluster"
echo "==============================================="

for node in {1..3}; do
    pid_file="/tmp/od-node${node}.pid"
    if [[ -f "$pid_file" ]]; then
        pid=$(cat "$pid_file")
        if kill -0 "$pid" 2>/dev/null; then
            echo "Stopping Node $node (PID: $pid)..."
            kill "$pid"
            sleep 2
            if kill -0 "$pid" 2>/dev/null; then
                echo "Force killing Node $node..."
                kill -9 "$pid"
            fi
        fi
        rm -f "$pid_file"
    fi
done

echo "✅ Cluster stopped"
EOF
        chmod +x "$stop_script"
    fi
    
    # Cluster status script
    local status_script="$BASE_DIR/scripts/cluster-status.sh"
    if ! $DRY_RUN; then
        cat > "$status_script" << 'EOF'
#!/bin/bash
# Check cluster status

echo "🔍 Ollama Distributed Training Cluster Status"
echo "============================================="

nodes=(
    "Node 1:http://127.0.0.1:8080"
    "Node 2:http://127.0.0.1:8082" 
    "Node 3:http://127.0.0.1:8084"
)

for node_info in "${nodes[@]}"; do
    name=$(echo "$node_info" | cut -d: -f1)
    url=$(echo "$node_info" | cut -d: -f2,3)
    
    echo ""
    echo "$name ($url):"
    if health=$(curl -s -f "$url/health" 2>/dev/null); then
        status=$(echo "$health" | jq -r '.status // "unknown"' 2>/dev/null || echo "unknown")
        echo "  ✅ Health: $status"
        
        if cluster=$(curl -s -f "$url/api/distributed/status" 2>/dev/null); then
            cluster_size=$(echo "$cluster" | jq -r '.cluster_size // 0' 2>/dev/null || echo "0")
            connected_peers=$(echo "$cluster" | jq -r '.connected_peers // 0' 2>/dev/null || echo "0")
            leader=$(echo "$cluster" | jq -r '.leader // "unknown"' 2>/dev/null || echo "unknown")
            echo "  📊 Cluster Size: $cluster_size"
            echo "  🔗 Connected Peers: $connected_peers"
            echo "  👑 Leader: $leader"
        else
            echo "  ⚠️  Cluster status unavailable"
        fi
    else
        echo "  ❌ Not responding"
    fi
done

echo ""
echo "🌐 Web Interfaces:"
echo "  Node 1: http://127.0.0.1:8081"
echo "  Node 2: http://127.0.0.1:8083"
echo "  Node 3: http://127.0.0.1:8085"
EOF
        chmod +x "$status_script"
    fi
    
    print_success "Created cluster management scripts"
}

create_exercise_runner_script() {
    local runner_script="$BASE_DIR/scripts/exercise-runner.sh"
    if ! $DRY_RUN; then
        cat > "$runner_script" << 'EOF'
#!/bin/bash
# Training Exercise Runner

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TRAINING_DIR="$(dirname "$SCRIPT_DIR")"
PROJECT_DIR="$(cd "$TRAINING_DIR/.." && pwd)"

show_usage() {
    echo "Training Exercise Runner"
    echo ""
    echo "Usage: $0 <module> <exercise> [options]"
    echo ""
    echo "Modules:"
    echo "  1, installation     - Installation and setup exercises"
    echo "  2, configuration    - Configuration management exercises"
    echo "  3, operations       - Basic operations exercises"
    echo "  4, api-integration  - API integration exercises"
    echo "  5, validation       - Validation and testing exercises"
    echo ""
    echo "Exercises:"
    echo "  1.1 - Complete Installation from Source"
    echo "  1.2 - Environment Validation"
    echo "  2.1 - Create Custom Configuration Profiles"
    echo "  2.2 - Configuration Validation and Testing"
    echo "  3.1 - Start and Monitor Distributed Node"
    echo "  3.2 - Multi-Node Cluster Setup"
    echo "  4.1 - Comprehensive API Client Testing"
    echo "  4.2 - Custom Integration Development"
    echo "  5.1 - Complete Training Validation"
    echo "  5.2 - Custom Test Development"
    echo ""
    echo "Options:"
    echo "  --help        Show this help"
    echo "  --list        List available exercises"
    echo "  --validate    Validate exercise environment"
    echo ""
    echo "Examples:"
    echo "  $0 1 1           # Run exercise 1.1"
    echo "  $0 installation 1 # Same as above"
    echo "  $0 --list        # List all exercises"
}

run_exercise() {
    local module="$1"
    local exercise="$2"
    
    case "${module}.${exercise}" in
        "1.1"|"installation.1")
            echo "🏗️  Running Exercise 1.1: Complete Installation from Source"
            cd "$PROJECT_DIR"
            bash "$TRAINING_DIR/code-examples/01-installation/install-and-build.sh"
            ;;
        "1.2"|"installation.2")
            echo "🔍 Running Exercise 1.2: Environment Validation"
            cd "$PROJECT_DIR"
            bash "$TRAINING_DIR/code-examples/01-installation/install-and-build.sh" validate-only
            ;;
        "2.1"|"configuration.1")
            echo "⚙️  Running Exercise 2.1: Create Custom Configuration Profiles"
            cd "$TRAINING_DIR/code-examples/02-configuration"
            go run configuration-manager.go
            ;;
        "3.1"|"operations.1")
            echo "🚀 Running Exercise 3.1: Start and Monitor Distributed Node"
            bash "$TRAINING_DIR/code-examples/03-operations/health-monitoring-dashboard.sh" check
            ;;
        "4.1"|"api-integration.1")
            echo "🔌 Running Exercise 4.1: Comprehensive API Client Testing"
            cd "$TRAINING_DIR/code-examples/04-api-integration"
            go run comprehensive-api-client.go basic
            ;;
        "5.1"|"validation.1")
            echo "✅ Running Exercise 5.1: Complete Training Validation"
            cd "$TRAINING_DIR/code-examples/05-validation-testing"
            go run training-validation-suite.go
            ;;
        *)
            echo "❌ Unknown exercise: ${module}.${exercise}"
            echo "Run '$0 --help' for available exercises"
            exit 1
            ;;
    esac
}

# Parse command line
case "${1:-}" in
    "--help"|"-h")
        show_usage
        exit 0
        ;;
    "--list"|"-l")
        echo "Available exercises:"
        echo "  1.1 - Complete Installation from Source"
        echo "  1.2 - Environment Validation" 
        echo "  2.1 - Create Custom Configuration Profiles"
        echo "  2.2 - Configuration Validation and Testing"
        echo "  3.1 - Start and Monitor Distributed Node"
        echo "  3.2 - Multi-Node Cluster Setup"
        echo "  4.1 - Comprehensive API Client Testing"
        echo "  4.2 - Custom Integration Development"
        echo "  5.1 - Complete Training Validation"
        echo "  5.2 - Custom Test Development"
        exit 0
        ;;
    "")
        show_usage
        exit 1
        ;;
    *)
        run_exercise "$1" "$2"
        ;;
esac
EOF
        chmod +x "$runner_script"
    fi
    print_success "Created exercise runner script"
}

create_validation_automation_script() {
    local validation_script="$BASE_DIR/scripts/validate-training-environment.sh"
    if ! $DRY_RUN; then
        cat > "$validation_script" << 'EOF'
#!/bin/bash
# Training Environment Validation Automation

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TRAINING_DIR="$(dirname "$SCRIPT_DIR")"
PROJECT_DIR="$(cd "$TRAINING_DIR/.." && pwd)"

echo "🔍 Validating Ollama Distributed Training Environment"
echo "===================================================="

# Validate project structure
echo ""
echo "📁 Project Structure:"
required_dirs=("$PROJECT_DIR/cmd/node" "$PROJECT_DIR/pkg/api" "$PROJECT_DIR/internal/config")
for dir in "${required_dirs[@]}"; do
    if [[ -d "$dir" ]]; then
        echo "  ✅ $dir"
    else
        echo "  ❌ $dir (missing)"
    fi
done

# Validate training structure
echo ""
echo "🎓 Training Structure:"
training_dirs=("$TRAINING_DIR/code-examples" "$TRAINING_DIR/exercises" "$TRAINING_DIR/automation")
for dir in "${training_dirs[@]}"; do
    if [[ -d "$dir" ]]; then
        echo "  ✅ $dir"
    else
        echo "  ❌ $dir (missing)"
    fi
done

# Validate binary
echo ""
echo "🔧 Binary Status:"
binary_path="$PROJECT_DIR/bin/ollama-distributed"
if [[ -x "$binary_path" ]]; then
    echo "  ✅ Binary exists and is executable"
    version=$("$binary_path" --version 2>/dev/null || echo "unknown")
    echo "     Version: $version"
else
    echo "  ❌ Binary not found or not executable"
    echo "     Run: cd $PROJECT_DIR && go build -o bin/ollama-distributed ./cmd/node"
fi

# Validate configurations
echo ""
echo "⚙️  Configuration Profiles:"
profiles=("development" "testing" "node2" "node3")
for profile in "${profiles[@]}"; do
    profile_path="$TRAINING_DIR/../profiles/${profile}.yaml"
    if [[ -f "$profile_path" ]]; then
        echo "  ✅ $profile.yaml"
    else
        echo "  ❌ $profile.yaml (missing)"
    fi
done

# Validate Go version
echo ""
echo "🐹 Go Environment:"
if command -v go &> /dev/null; then
    go_version=$(go version | awk '{print $3}' | sed 's/go//')
    echo "  ✅ Go version: $go_version"
else
    echo "  ❌ Go not installed"
fi

# Validate required tools
echo ""
echo "🛠️  Required Tools:"
tools=("curl" "jq" "git")
for tool in "${tools[@]}"; do
    if command -v "$tool" &> /dev/null; then
        echo "  ✅ $tool"
    else
        echo "  ⚠️  $tool (recommended but not required)"
    fi
done

# Validate ports
echo ""
echo "🌐 Port Availability:"
ports=("8080" "8081" "8082" "8083" "8084" "8085" "4001" "4002" "4003")
for port in "${ports[@]}"; do
    if netstat -ln 2>/dev/null | grep -q ":$port "; then
        echo "  ⚠️  Port $port is in use"
    else
        echo "  ✅ Port $port available"
    fi
done

echo ""
echo "✅ Validation complete!"
echo ""
echo "Next steps:"
echo "  1. Source training aliases: source $TRAINING_DIR/../scripts/training-aliases.sh"
echo "  2. Run first exercise: od-build && od-dev"
echo "  3. Check health: od-health"
EOF
        chmod +x "$validation_script"
    fi
    print_success "Created validation automation script"
}

copy_code_examples() {
    print_section "Copying Code Examples to Training Environment"
    
    if [[ -d "$TRAINING_DIR/code-examples" ]]; then
        # Create symlinks or copies in user training directory for easy access
        local examples_dir="$BASE_DIR/code-examples"
        if ! $DRY_RUN; then
            mkdir -p "$examples_dir"
            
            # Create symlinks to code examples
            ln -sf "$TRAINING_DIR/code-examples"/* "$examples_dir/" 2>/dev/null || {
                # If symlinks fail, copy files
                cp -r "$TRAINING_DIR/code-examples"/* "$examples_dir/"
            }
        fi
        print_success "Code examples available in training environment"
    else
        print_warning "Code examples directory not found"
    fi
}

generate_training_documentation() {
    print_section "Generating Training Documentation"
    
    local doc_file="$BASE_DIR/README.md"
    if ! $DRY_RUN; then
        cat > "$doc_file" << EOF
# Ollama Distributed Training Environment

Welcome to your personalized Ollama Distributed training environment!

## 🎯 Quick Start

1. **Load training environment:**
   \`\`\`bash
   source scripts/training-aliases.sh
   \`\`\`

2. **Build the project:**
   \`\`\`bash
   od-build
   \`\`\`

3. **Start development node:**
   \`\`\`bash
   od-dev
   \`\`\`

4. **Check health:**
   \`\`\`bash
   od-health
   \`\`\`

## 📚 Training Modules

### Module 1: Installation and Setup
- Exercise 1.1: Complete Installation from Source
- Exercise 1.2: Environment Validation

### Module 2: Configuration Management  
- Exercise 2.1: Create Custom Configuration Profiles
- Exercise 2.2: Configuration Validation and Testing

### Module 3: Basic Operations
- Exercise 3.1: Start and Monitor Distributed Node
- Exercise 3.2: Multi-Node Cluster Setup

### Module 4: API Integration
- Exercise 4.1: Comprehensive API Client Testing
- Exercise 4.2: Custom Integration Development

### Module 5: Validation and Testing
- Exercise 5.1: Complete Training Validation
- Exercise 5.2: Custom Test Development

## 🛠️ Tools and Scripts

### Cluster Management
- \`od-cluster-start\` - Start 3-node training cluster
- \`od-cluster-stop\` - Stop all cluster nodes
- \`od-cluster-status\` - Check cluster health

### Monitoring and Validation
- \`od-monitor\` - Health monitoring dashboard
- \`od-validate\` - Run validation suite
- \`scripts/validate-training-environment.sh\` - Environment validation

### Exercise Runner
- \`scripts/exercise-runner.sh\` - Automated exercise execution

## 📁 Directory Structure

\`\`\`
$BASE_DIR/
├── profiles/           # Configuration profiles
├── scripts/           # Training automation scripts
├── exercises/         # Exercise templates and solutions
├── code-examples/     # Working code examples
├── logs/              # Training logs
├── data/              # Training data
└── tools/             # Additional training tools
\`\`\`

## 🔧 Configuration Profiles

- \`development.yaml\` - Development environment
- \`testing.yaml\` - Testing and validation
- \`node2.yaml\` - Multi-node cluster node 2
- \`node3.yaml\` - Multi-node cluster node 3

## 📊 Monitoring Endpoints

When running the development node:
- **API**: http://127.0.0.1:8080
- **Web Interface**: http://127.0.0.1:8081
- **Health Check**: http://127.0.0.1:8080/health
- **Cluster Status**: http://127.0.0.1:8080/api/distributed/status

## 🎓 Certification Path

1. Complete all 5 training modules
2. Pass validation tests
3. Complete certification challenge
4. Submit required deliverables

## 📞 Support

- Training documentation: \`$TRAINING_DIR/exercises/exercise-templates.md\`
- Code examples: \`$BASE_DIR/code-examples/\`
- Validation logs: \`$BASE_DIR/logs/\`

---

**Environment created**: $(date)
**Project location**: $PROJECT_ROOT
**Training location**: $BASE_DIR

Happy learning! 🚀
EOF
    fi
    print_success "Generated training documentation"
}

show_completion_summary() {
    print_banner "Training Environment Setup Complete"
    
    echo -e "${GREEN}🎉 Your Ollama Distributed training environment is ready!${NC}\n"
    
    echo -e "${CYAN}📍 Environment Details:${NC}"
    echo -e "   Training Directory: ${WHITE}$BASE_DIR${NC}"
    echo -e "   Project Directory:  ${WHITE}$PROJECT_ROOT${NC}"
    echo -e "   Log File:          ${WHITE}$LOG_FILE${NC}"
    
    echo -e "\n${CYAN}🚀 Quick Start Commands:${NC}"
    echo -e "   Load environment:   ${WHITE}source $BASE_DIR/scripts/training-aliases.sh${NC}"
    echo -e "   Validate setup:     ${WHITE}$BASE_DIR/scripts/validate-training-environment.sh${NC}"
    echo -e "   Build project:      ${WHITE}od-build${NC}"
    echo -e "   Start development:  ${WHITE}od-dev${NC}"
    
    echo -e "\n${CYAN}📚 Training Resources:${NC}"
    echo -e "   Exercise templates: ${WHITE}$TRAINING_DIR/exercises/exercise-templates.md${NC}"
    echo -e "   Code examples:      ${WHITE}$BASE_DIR/code-examples/${NC}"
    echo -e "   Training guide:     ${WHITE}$BASE_DIR/README.md${NC}"
    
    echo -e "\n${CYAN}🔧 Multi-Node Cluster:${NC}"
    echo -e "   Start cluster:      ${WHITE}od-cluster-start${NC}"
    echo -e "   Check status:       ${WHITE}od-cluster-status${NC}"
    echo -e "   Stop cluster:       ${WHITE}od-cluster-stop${NC}"
    
    echo -e "\n${YELLOW}💡 Next Steps:${NC}"
    echo -e "   1. Run: ${WHITE}source $BASE_DIR/scripts/training-aliases.sh${NC}"
    echo -e "   2. Run: ${WHITE}$BASE_DIR/scripts/validate-training-environment.sh${NC}"
    echo -e "   3. Start with Module 1 exercises"
    echo -e "   4. Follow the training documentation"
    
    echo -e "\n${GREEN}Training environment setup completed successfully! 🎓${NC}\n"
}

# Main execution functions

show_usage() {
    cat << EOF
Ollama Distributed Training Environment Setup

Usage: $0 [options]

Options:
    --mode MODE         Setup mode: full, minimal, profiles-only (default: full)
    --base-dir DIR      Base directory for training environment (default: ~/.ollama-distributed-training)
    --verbose           Enable verbose output
    --dry-run          Show what would be done without making changes
    --force            Overwrite existing files without confirmation
    --help             Show this help

Modes:
    full              Complete training environment setup (default)
    minimal           Basic setup with essential components only
    profiles-only     Only create configuration profiles
    scripts-only      Only create training scripts

Examples:
    $0                                    # Full setup with defaults
    $0 --mode minimal                     # Minimal setup
    $0 --base-dir /opt/ollama-training    # Custom directory
    $0 --dry-run --verbose               # Preview changes

EOF
}

main() {
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --mode)
                SETUP_MODE="$2"
                shift 2
                ;;
            --base-dir)
                BASE_DIR="$2"
                shift 2
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --dry-run)
                DRY_RUN=true
                VERBOSE=true
                shift
                ;;
            --force)
                FORCE_OVERWRITE=true
                shift
                ;;
            --help|-h)
                show_usage
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Validate setup mode
    case "$SETUP_MODE" in
        full|minimal|profiles-only|scripts-only)
            ;;
        *)
            print_error "Invalid setup mode: $SETUP_MODE"
            show_usage
            exit 1
            ;;
    esac
    
    print_banner "Ollama Distributed Training Environment Setup"
    
    if $DRY_RUN; then
        print_warning "DRY RUN MODE - No changes will be made"
    fi
    
    print_info "Setup Mode: $SETUP_MODE"
    print_info "Base Directory: $BASE_DIR"
    print_info "Project Root: $PROJECT_ROOT"
    
    # Confirm before proceeding
    if ! confirm_action "This will set up the training environment in: $BASE_DIR"; then
        print_info "Setup cancelled by user"
        exit 0
    fi
    
    # Execute setup based on mode
    case "$SETUP_MODE" in
        full)
            setup_directory_structure
            setup_configuration_profiles
            setup_training_scripts
            copy_code_examples
            generate_training_documentation
            ;;
        minimal)
            setup_directory_structure
            setup_configuration_profiles
            print_info "Minimal setup completed - only directories and profiles created"
            ;;
        profiles-only)
            mkdir -p "$BASE_DIR/profiles"
            setup_configuration_profiles
            print_info "Configuration profiles created"
            ;;
        scripts-only)
            mkdir -p "$BASE_DIR/scripts"
            setup_training_scripts
            print_info "Training scripts created"
            ;;
    esac
    
    if [[ "$SETUP_MODE" == "full" ]]; then
        show_completion_summary
    else
        print_success "Setup completed for mode: $SETUP_MODE"
    fi
}

# Run main function
main "$@"