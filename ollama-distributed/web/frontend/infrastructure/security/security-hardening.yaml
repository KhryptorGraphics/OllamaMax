# Ollama Frontend - Security Hardening Configuration
# Production-ready security policies and compliance

# Pod Security Standards
apiVersion: v1
kind: Namespace
metadata:
  name: ollama-frontend
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    security.compliance/level: high
    security.scanning/enabled: "true"

---
# Network Security Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ollama-frontend-security-policy
  namespace: ollama-frontend
  labels:
    app: ollama-frontend
    component: security-policy
spec:
  podSelector:
    matchLabels:
      app: ollama-frontend
  
  policyTypes:
  - Ingress
  - Egress
  
  # Strict ingress rules
  ingress:
  # Allow ingress from ingress controller only
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  
  # Allow Prometheus scraping
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  
  # Egress rules - restrictive by default
  egress:
  # DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # HTTPS traffic only
  - to: []
    ports:
    - protocol: TCP
      port: 443
  
  # Backend API access
  - to:
    - namespaceSelector:
        matchLabels:
          name: ollama-backend
    ports:
    - protocol: TCP
      port: 8080
  
  # Block all other traffic
  - to: []
    ports: []

---
# Security Context Constraints
apiVersion: v1
kind: SecurityContextConstraints
metadata:
  name: ollama-frontend-scc
  labels:
    app: ollama-frontend
    component: security-constraints
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegedContainer: false
allowedCapabilities: []
allowedFlexVolumes: []
allowedUnsafeSysctls: []
defaultAddCapabilities: []
defaultAllowPrivilegeEscalation: false
forbiddenSysctls:
- "*"
fsGroup:
  type: MustRunAs
  ranges:
  - min: 10001
    max: 10001
priority: null
readOnlyRootFilesystem: true
requiredDropCapabilities:
- ALL
runAsUser:
  type: MustRunAsNonRoot
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: MustRunAs
  ranges:
  - min: 10001
    max: 10001
users:
- system:serviceaccount:ollama-frontend:ollama-frontend
volumes:
- configMap
- emptyDir
- projected
- secret

---
# RBAC - Minimal Permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ollama-frontend-minimal
  namespace: ollama-frontend
  labels:
    app: ollama-frontend
    component: rbac
rules:
# Read-only access to own resources
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["ollama-frontend-config"]
  verbs: ["get", "list", "watch"]

- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["ollama-frontend-secrets"]
  verbs: ["get", "list", "watch"]

# Self-introspection
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
  resourceNames: []

---
# RBAC Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ollama-frontend-minimal
  namespace: ollama-frontend
  labels:
    app: ollama-frontend
    component: rbac
subjects:
- kind: ServiceAccount
  name: ollama-frontend
  namespace: ollama-frontend
roleRef:
  kind: Role
  name: ollama-frontend-minimal
  apiGroup: rbac.authorization.k8s.io

---
# OPA Gatekeeper Constraint Template
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: ollama-security-requirements
  labels:
    app: ollama-frontend
    component: security-policy
spec:
  crd:
    spec:
      names:
        kind: OllamaSecurityRequirements
      validation:
        type: object
        properties:
          requiredSecurityContext:
            type: object
          forbiddenCapabilities:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package ollama.security.requirements
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.runAsNonRoot
          msg := "Container must run as non-root user"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.readOnlyRootFilesystem
          msg := "Container must have read-only root filesystem"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          container.securityContext.allowPrivilegeEscalation
          msg := "Container must not allow privilege escalation"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          capability := container.securityContext.capabilities.add[_]
          capability != "NET_BIND_SERVICE"
          msg := sprintf("Container cannot add capability: %v", [capability])
        }

---
# Gatekeeper Constraint
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: OllamaSecurityRequirements
metadata:
  name: ollama-frontend-security
  labels:
    app: ollama-frontend
    component: security-constraint
spec:
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment"]
    namespaces: ["ollama-frontend"]
  parameters:
    requiredSecurityContext:
      runAsNonRoot: true
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
    forbiddenCapabilities:
      - "NET_ADMIN"
      - "SYS_ADMIN"
      - "DAC_OVERRIDE"

---
# Falco Security Rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-security-rules
  namespace: falco-system
  labels:
    app: ollama-frontend
    component: security-monitoring
data:
  ollama-frontend-rules.yaml: |
    - rule: Ollama Frontend Suspicious Network Activity
      desc: Detect suspicious network connections from Ollama Frontend
      condition: >
        spawned_process and
        proc.pname in (nodejs, node) and
        k8s.ns.name = "ollama-frontend" and
        ((fd.sockfamily = ip and fd.name != "" and not fd.name in ("0.0.0.0", "127.0.0.1")) or
         (fd.sockfamily = unix and not fd.name startswith "/tmp"))
      output: >
        Suspicious network activity in Ollama Frontend
        (user=%user.name command=%proc.cmdline connection=%fd.name container=%container.name)
      priority: WARNING
      tags: [network, ollama-frontend]
    
    - rule: Ollama Frontend Unauthorized File Access
      desc: Detect unauthorized file access in Ollama Frontend containers
      condition: >
        open_write and
        container and
        k8s.ns.name = "ollama-frontend" and
        not fd.name in ("/tmp", "/dev/stdout", "/dev/stderr") and
        not fd.name startswith "/tmp/" and
        not fd.name startswith "/app/logs/"
      output: >
        Unauthorized file write in Ollama Frontend
        (user=%user.name command=%proc.cmdline file=%fd.name container=%container.name)
      priority: ERROR
      tags: [filesystem, ollama-frontend]
    
    - rule: Ollama Frontend Privilege Escalation Attempt
      desc: Detect privilege escalation attempts in Ollama Frontend
      condition: >
        spawned_process and
        k8s.ns.name = "ollama-frontend" and
        proc.name in (su, sudo, setuid, setgid, chmod) and
        not user.name = "root"
      output: >
        Privilege escalation attempt in Ollama Frontend
        (user=%user.name command=%proc.cmdline container=%container.name)
      priority: CRITICAL
      tags: [privilege-escalation, ollama-frontend]

---
# Image Security Policy
apiVersion: v1
kind: ConfigMap
metadata:
  name: image-security-policy
  namespace: ollama-frontend
  labels:
    app: ollama-frontend
    component: image-policy
data:
  policy.yaml: |
    # Image security policy for Ollama Frontend
    apiVersion: v1
    kind: ImagePolicy
    metadata:
      name: ollama-frontend-image-policy
    spec:
      images:
        - name: "ollamamax/frontend"
          # Require signed images
          policy:
            type: "signedBy"
            keyType: "cosign"
            keys:
              - "cosign-public-key"
          
          # Vulnerability scanning requirements
          vulnerabilityPolicy:
            maxSeverity: "medium"
            excludeCVEs: []
            
          # Base image requirements
          baseImagePolicy:
            allowedImages:
              - "node:18-alpine"
              - "node:20-alpine"
              - "gcr.io/distroless/nodejs18-debian11"
            disallowedTags:
              - "latest"
              - "main"
              - "master"

---
# Admission Controller Webhook
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: ollama-frontend-security-webhook
  labels:
    app: ollama-frontend
    component: admission-controller
rules:
- operations: [ "CREATE", "UPDATE" ]
  apiGroups: ["apps"]
  apiVersions: ["v1"]
  resources: ["deployments"]
  namespaceSelector:
    matchLabels:
      name: ollama-frontend
clientConfig:
  service:
    name: security-admission-controller
    namespace: ollama-security
    path: "/validate"
  caBundle: "{{ .Values.caCert }}"
admissionReviewVersions: ["v1", "v1beta1"]
sideEffects: None
failurePolicy: Fail

---
# Container Security Context
apiVersion: v1
kind: ConfigMap
metadata:
  name: container-security-config
  namespace: ollama-frontend
  labels:
    app: ollama-frontend
    component: security-config
data:
  security-context.yaml: |
    # Security context configuration for Ollama Frontend containers
    securityContext:
      # Pod-level security context
      runAsNonRoot: true
      runAsUser: 10001
      runAsGroup: 10001
      fsGroup: 10001
      fsGroupChangePolicy: "OnRootMismatch"
      seccompProfile:
        type: RuntimeDefault
      
      # Container-level security context
      containerSecurityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        procMount: Default
        capabilities:
          drop:
            - ALL
          add: []  # No capabilities added
        seccompProfile:
          type: RuntimeDefault
        seLinuxOptions:
          level: "s0:c123,c456"

---
# Security Scanning CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: security-scan
  namespace: ollama-frontend
  labels:
    app: ollama-frontend
    component: security-scanning
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: security-scanner
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            fsGroup: 10001
          containers:
          - name: security-scanner
            image: aquasec/trivy:latest
            command:
            - /bin/sh
            - -c
            - |
              set -e
              
              echo "Starting security scan..."
              
              # Scan running images
              kubectl get pods -n ollama-frontend -o jsonpath='{.items[*].spec.containers[*].image}' | \
                xargs -n 1 trivy image --severity HIGH,CRITICAL --format json
              
              # Scan filesystem
              trivy fs /app --severity HIGH,CRITICAL --format json
              
              # Scan Kubernetes manifests
              trivy k8s --report summary cluster
              
              # Generate security report
              cat > /tmp/security-report.json << EOF
              {
                "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                "namespace": "ollama-frontend",
                "scan_type": "comprehensive",
                "findings": {
                  "critical": 0,
                  "high": 0,
                  "medium": 0,
                  "low": 0
                }
              }
              EOF
              
              # Upload report to S3 or monitoring system
              # aws s3 cp /tmp/security-report.json s3://security-reports/
              
              echo "Security scan completed"
            resources:
              requests:
                cpu: 200m
                memory: 256Mi
              limits:
                cpu: 1
                memory: 1Gi
            volumeMounts:
            - name: tmp
              mountPath: /tmp
          volumes:
          - name: tmp
            emptyDir: {}

---
# Compliance Monitoring
apiVersion: v1
kind: ConfigMap
metadata:
  name: compliance-monitoring
  namespace: ollama-frontend
  labels:
    app: ollama-frontend
    component: compliance
data:
  compliance-checks.yaml: |
    # SOC 2 Type II Compliance Checks
    soc2_checks:
      - name: "Access Controls"
        description: "Verify RBAC and authentication controls"
        command: "kubectl auth can-i --list --as=system:serviceaccount:ollama-frontend:ollama-frontend"
        
      - name: "Data Encryption"
        description: "Verify data encryption in transit and at rest"
        command: "kubectl get secrets -n ollama-frontend -o yaml | grep -c 'type: kubernetes.io/tls'"
        
      - name: "Audit Logging"
        description: "Verify audit logs are being collected"
        command: "kubectl get events -n ollama-frontend --sort-by=.metadata.creationTimestamp"
    
    # ISO 27001 Compliance Checks  
    iso27001_checks:
      - name: "Asset Management"
        description: "Verify all resources are properly labeled and tracked"
        command: "kubectl get all -n ollama-frontend --show-labels"
        
      - name: "Vulnerability Management"
        description: "Verify vulnerability scanning is active"
        command: "trivy k8s --report summary ollama-frontend"
        
      - name: "Incident Response"
        description: "Verify incident response procedures are documented"
        command: "test -f /docs/incident-response-plan.md"

---
# Security Metrics Exporter
apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-metrics-exporter
  namespace: ollama-frontend
  labels:
    app: security-metrics-exporter
    component: security-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: security-metrics-exporter
  template:
    metadata:
      labels:
        app: security-metrics-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: security-metrics
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
      - name: exporter
        image: ollamamax/security-metrics-exporter:latest
        ports:
        - containerPort: 8080
          name: metrics
        env:
        - name: NAMESPACE
          value: ollama-frontend
        - name: METRICS_PORT
          value: "8080"
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}

---
# Security Metrics Service
apiVersion: v1
kind: Service
metadata:
  name: security-metrics-exporter
  namespace: ollama-frontend
  labels:
    app: security-metrics-exporter
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: security-metrics-exporter