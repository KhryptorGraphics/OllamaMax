# Ollama Frontend - Blue-Green Deployment Configuration
# Production-ready blue-green deployment with zero-downtime switching

# Blue Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-frontend-blue
  namespace: ollama-frontend
  labels:
    app: ollama-frontend
    version: blue
    deployment-strategy: blue-green
    managed-by: terraform
  annotations:
    deployment.kubernetes.io/revision: "{{ .Values.blueRevision }}"
    deployment.kubernetes.io/desired-replicas: "{{ .Values.replicas }}"
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: ollama-frontend
      version: blue
  template:
    metadata:
      labels:
        app: ollama-frontend
        version: blue
        deployment-strategy: blue-green
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ollama-frontend
      automountServiceAccountToken: false
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      
      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["ollama-frontend"]
              topologyKey: kubernetes.io/hostname
      
      # Node selector for production nodes
      nodeSelector:
        node-role: production
        instance-type: compute-optimized
      
      # Tolerations for production nodes
      tolerations:
      - key: "production"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      containers:
      - name: ollama-frontend
        image: {{ .Values.image }}:{{ .Values.imageTag }}
        imagePullPolicy: Always
        
        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          capabilities:
            drop:
            - ALL
        
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment variables
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DEPLOYMENT_COLOR
          value: "blue"
        - name: APP_VERSION
          value: "{{ .Values.imageTag }}"
        
        # Environment from ConfigMap and Secret
        envFrom:
        - configMapRef:
            name: ollama-frontend-config
        - secretRef:
            name: ollama-frontend-secrets
        
        # Resource limits and requests
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
            ephemeral-storage: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
            ephemeral-storage: "1Gi"
        
        # Liveness probe
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Readiness probe
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
          successThreshold: 2
        
        # Startup probe
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
          successThreshold: 1
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.cache
        - name: config
          mountPath: /app/config
          readOnly: true
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: "100Mi"
      - name: cache
        emptyDir:
          sizeLimit: "500Mi"
      - name: config
        configMap:
          name: ollama-frontend-config
          defaultMode: 0444
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Green Deployment (identical to blue with version label)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-frontend-green
  namespace: ollama-frontend
  labels:
    app: ollama-frontend
    version: green
    deployment-strategy: blue-green
    managed-by: terraform
  annotations:
    deployment.kubernetes.io/revision: "{{ .Values.greenRevision }}"
    deployment.kubernetes.io/desired-replicas: "{{ .Values.replicas }}"
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: ollama-frontend
      version: green
  template:
    metadata:
      labels:
        app: ollama-frontend
        version: green
        deployment-strategy: blue-green
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ollama-frontend
      automountServiceAccountToken: false
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      
      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["ollama-frontend"]
              topologyKey: kubernetes.io/hostname
      
      # Node selector for production nodes
      nodeSelector:
        node-role: production
        instance-type: compute-optimized
      
      # Tolerations for production nodes
      tolerations:
      - key: "production"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      containers:
      - name: ollama-frontend
        image: {{ .Values.image }}:{{ .Values.imageTag }}
        imagePullPolicy: Always
        
        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          capabilities:
            drop:
            - ALL
        
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment variables
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DEPLOYMENT_COLOR
          value: "green"
        - name: APP_VERSION
          value: "{{ .Values.imageTag }}"
        
        # Environment from ConfigMap and Secret
        envFrom:
        - configMapRef:
            name: ollama-frontend-config
        - secretRef:
            name: ollama-frontend-secrets
        
        # Resource limits and requests
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
            ephemeral-storage: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
            ephemeral-storage: "1Gi"
        
        # Liveness probe
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Readiness probe
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
          successThreshold: 2
        
        # Startup probe
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
          successThreshold: 1
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.cache
        - name: config
          mountPath: /app/config
          readOnly: true
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: "100Mi"
      - name: cache
        emptyDir:
          sizeLimit: "500Mi"
      - name: config
        configMap:
          name: ollama-frontend-config
          defaultMode: 0444
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Blue Service
apiVersion: v1
kind: Service
metadata:
  name: ollama-frontend-blue
  namespace: ollama-frontend
  labels:
    app: ollama-frontend
    version: blue
    service-type: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: ollama-frontend
    version: blue
  ports:
  - name: http
    port: 3000
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP

---
# Green Service
apiVersion: v1
kind: Service
metadata:
  name: ollama-frontend-green
  namespace: ollama-frontend
  labels:
    app: ollama-frontend
    version: green
    service-type: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: ollama-frontend
    version: green
  ports:
  - name: http
    port: 3000
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP

---
# Active Service (points to currently active deployment)
apiVersion: v1
kind: Service
metadata:
  name: ollama-frontend-active
  namespace: ollama-frontend
  labels:
    app: ollama-frontend
    service-type: active
    deployment-strategy: blue-green
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    deployment.active-color: "{{ .Values.activeColor }}"
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: ollama-frontend
    version: "{{ .Values.activeColor }}"
  ports:
  - name: http
    port: 3000
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP