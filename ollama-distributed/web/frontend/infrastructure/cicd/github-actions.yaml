# Ollama Frontend - Production CI/CD Pipeline
# GitHub Actions workflow for automated testing, building, and deployment

name: Production CI/CD Pipeline

on:
  push:
    branches: [main, release/*]
    paths: ['web/frontend/**', '.github/workflows/frontend-**']
  pull_request:
    branches: [main]
    paths: ['web/frontend/**']
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ollamamax/frontend
  NODE_VERSION: '20'
  KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: web/frontend
      run: npm ci --prefer-offline --no-audit
    
    - name: Run ESLint
      working-directory: web/frontend
      run: npm run lint -- --format=json --output-file=eslint-report.json
    
    - name: Run TypeScript check
      working-directory: web/frontend
      run: npm run typecheck
    
    - name: Run Prettier check
      working-directory: web/frontend
      run: npm run format:check
    
    - name: Security audit
      working-directory: web/frontend
      run: |
        npm audit --audit-level=high --json > npm-audit.json
        if [ $? -ne 0 ]; then
          echo "Security vulnerabilities found!"
          cat npm-audit.json
          exit 1
        fi
    
    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          VERSION="${{ github.event.release.tag_name }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          VERSION="main-$(git rev-parse --short HEAD)"
        else
          VERSION="pr-${{ github.event.number }}-$(git rev-parse --short HEAD)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
    
    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          web/frontend/eslint-report.json
          web/frontend/npm-audit.json

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: web/frontend
      run: npm ci --prefer-offline --no-audit
    
    - name: Install Playwright browsers
      if: matrix.test-type == 'e2e'
      working-directory: web/frontend
      run: npx playwright install --with-deps
    
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      working-directory: web/frontend
      run: |
        npm run test:unit -- --coverage --reporter=json > test-results.json
        npm run test:unit -- --coverage --reporter=lcov
    
    - name: Run integration tests
      if: matrix.test-type == 'integration'
      working-directory: web/frontend
      run: npm run test:integration -- --reporter=json > integration-results.json
    
    - name: Run E2E tests
      if: matrix.test-type == 'e2e'
      working-directory: web/frontend
      run: |
        npm run build
        npm run test:e2e -- --reporter=json > e2e-results.json
      env:
        CI: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          web/frontend/*-results.json
          web/frontend/coverage/
          web/frontend/test-results/
          web/frontend/playwright-report/

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=web/frontend/package.json
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript
        queries: security-and-quality
    
    - name: Run Semgrep scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/owasp-top-ten
          p/react
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          .semgrep/
          results.sarif

  # Build and Push Container Image
  build-and-push:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: [code-quality, test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ needs.code-quality.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=${{ needs.code-quality.outputs.version }}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: web/frontend
        file: web/frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_VERSION=${{ env.NODE_VERSION }}
          APP_VERSION=${{ needs.code-quality.outputs.version }}
    
    - name: Sign container image
      uses: sigstore/cosign-installer@v3
    - name: Sign the images
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
      env:
        COSIGN_EXPERIMENTAL: 1
    
    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.code-quality.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install k6
      run: |
        wget https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz
        tar -xzf k6-v0.47.0-linux-amd64.tar.gz
        sudo mv k6-v0.47.0-linux-amd64/k6 /usr/local/bin/
    
    - name: Run performance tests
      working-directory: web/frontend
      run: |
        # Start application in background
        npm run build
        npm run preview &
        sleep 10
        
        # Run k6 performance tests
        k6 run --out json=performance-results.json tests/performance/load-test.js
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: web/frontend/performance-results.json

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, performance-test]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.ollama.example.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Deploy to staging
      run: |
        # Update image tag in staging manifests
        sed -i "s|image: ollamamax/frontend:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}|g" \
          infrastructure/k8s/staging/deployment.yaml
        
        # Apply manifests
        kubectl apply -f infrastructure/k8s/namespace.yaml
        kubectl apply -f infrastructure/k8s/staging/
        
        # Wait for deployment
        kubectl rollout status deployment/ollama-frontend-staging -n ollama-frontend-staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Run smoke tests
        curl -f https://staging.ollama.example.com/health
        curl -f https://staging.ollama.example.com/api/v1/status
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Production Deployment (Blue-Green)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://ollama.example.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Determine target color
      id: target-color
      run: |
        # Get current active color
        ACTIVE_COLOR=$(kubectl get service ollama-frontend-active -n ollama-frontend -o jsonpath='{.spec.selector.version}' || echo "blue")
        TARGET_COLOR="green"
        if [ "$ACTIVE_COLOR" = "green" ]; then
          TARGET_COLOR="blue"
        fi
        echo "target-color=$TARGET_COLOR" >> $GITHUB_OUTPUT
        echo "Deploying to: $TARGET_COLOR (current active: $ACTIVE_COLOR)"
    
    - name: Deploy new version
      run: |
        # Update target deployment
        kubectl set image deployment/ollama-frontend-${{ steps.target-color.outputs.target-color }} \
          ollama-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }} \
          -n ollama-frontend
        
        # Wait for deployment
        kubectl rollout status deployment/ollama-frontend-${{ steps.target-color.outputs.target-color }} \
          -n ollama-frontend --timeout=600s
    
    - name: Run health checks
      run: |
        # Port forward to test the new deployment
        kubectl port-forward service/ollama-frontend-${{ steps.target-color.outputs.target-color }} 8080:3000 -n ollama-frontend &
        PF_PID=$!
        sleep 10
        
        # Run health checks
        curl -f http://localhost:8080/health
        curl -f http://localhost:8080/ready
        curl -f http://localhost:8080/api/v1/status
        
        # Kill port-forward
        kill $PF_PID
    
    - name: Switch traffic
      run: |
        # Update active service to point to new deployment
        kubectl patch service ollama-frontend-active -n ollama-frontend \
          -p '{"spec":{"selector":{"version":"${{ steps.target-color.outputs.target-color }}"}}}'
        
        # Verify switch
        kubectl get service ollama-frontend-active -n ollama-frontend -o yaml
    
    - name: Run production smoke tests
      run: |
        sleep 30
        curl -f https://ollama.example.com/health
        curl -f https://ollama.example.com/api/v1/status
        
        # Run basic functionality tests
        curl -X POST https://ollama.example.com/api/auth/validate \
          -H "Content-Type: application/json" \
          -d '{"token":"test"}' \
          -w "%{http_code}"
    
    - name: Monitor deployment
      run: |
        # Monitor for 5 minutes
        for i in {1..10}; do
          echo "Monitoring deployment ($(($i * 30)) seconds)..."
          
          # Check error rate
          ERROR_RATE=$(curl -s "http://prometheus.monitoring.svc.cluster.local:9090/api/v1/query?query=sum(rate(http_requests_total{job=\"ollama-frontend\",code=~\"5..\"}[5m]))/sum(rate(http_requests_total{job=\"ollama-frontend\"}[5m]))" | jq -r '.data.result[0].value[1]' 2>/dev/null || echo "0")
          
          # Check if error rate is too high
          if (( $(echo "$ERROR_RATE > 0.05" | bc -l) )); then
            echo "High error rate detected: $ERROR_RATE"
            echo "Triggering rollback..."
            
            # Rollback to previous color
            PREVIOUS_COLOR="blue"
            if [ "${{ steps.target-color.outputs.target-color }}" = "blue" ]; then
              PREVIOUS_COLOR="green"
            fi
            
            kubectl patch service ollama-frontend-active -n ollama-frontend \
              -p "{\"spec\":{\"selector\":{\"version\":\"$PREVIOUS_COLOR\"}}}"
            
            exit 1
          fi
          
          sleep 30
        done
        
        echo "Deployment successful - no rollback needed"
    
    - name: Create deployment record
      run: |
        kubectl annotate deployment ollama-frontend-${{ steps.target-color.outputs.target-color }} -n ollama-frontend \
          deployment.kubernetes.io/deployed-by="${{ github.actor }}" \
          deployment.kubernetes.io/deployed-at="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          deployment.kubernetes.io/git-commit="${{ github.sha }}" \
          deployment.kubernetes.io/version="${{ needs.build-and-push.outputs.image-tag }}" \
          --overwrite
    
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#production-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          🚀 Production Deployment ${{ job.status }}
          Version: ${{ needs.build-and-push.outputs.image-tag }}
          Target: ${{ steps.target-color.outputs.target-color }}
          Deployed by: ${{ github.actor }}

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    steps:
    - name: Monitor deployment for 30 minutes
      run: |
        echo "Monitoring production deployment for 30 minutes..."
        
        for i in {1..30}; do
          echo "Monitoring... $(($i)) minutes elapsed"
          
          # Check various metrics
          RESPONSE_TIME=$(curl -w "%{time_total}" -o /dev/null -s https://ollama.example.com/ || echo "999")
          HTTP_STATUS=$(curl -w "%{http_code}" -o /dev/null -s https://ollama.example.com/ || echo "000")
          
          if [ "$HTTP_STATUS" != "200" ] || (( $(echo "$RESPONSE_TIME > 5.0" | bc -l) )); then
            echo "Issue detected: HTTP $HTTP_STATUS, Response Time: ${RESPONSE_TIME}s"
            curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
              -H 'Content-type: application/json' \
              --data '{"text":"⚠️ Post-deployment issue detected in production!"}'
          fi
          
          sleep 60
        done
        
        echo "Post-deployment monitoring completed successfully"

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [post-deployment-monitoring]
    if: always()
    steps:
    - name: Delete old container images
      run: |
        # Keep last 10 versions
        gh api --paginate /orgs/ollamamax/packages/container/frontend/versions \
          --jq '.[] | select(.metadata.container.tags | length == 0) | .id' \
          | tail -n +11 \
          | xargs -r -I {} gh api --method DELETE /orgs/ollamamax/packages/container/frontend/versions/{}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}