openapi: 3.0.3
info:
  title: Ollama Distributed API
  description: |
    A comprehensive REST API for managing distributed AI model inference across multiple nodes. 
    This API enables model distribution, cluster management, real-time monitoring, and WebSocket-based live updates.
    
    ## Key Features
    - **Distributed Model Management**: Load, distribute, and manage AI models across nodes
    - **Cluster Operations**: Real-time cluster status, node management, and health monitoring  
    - **WebSocket Support**: Live updates for metrics, events, and status changes
    - **High Availability**: Built-in fault tolerance and automatic failover
    - **Enterprise Security**: Token-based authentication with RBAC support
  version: 1.0.0
  contact:
    name: Ollama Distributed Team
    url: https://github.com/ollama/ollama-distributed
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.ollama-distributed.example.com/v1
    description: Production server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Admin authentication token

  schemas:
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: integer
          format: int64
        services:
          type: object
          properties:
            p2p:
              type: string
              enum: [healthy, degraded, unhealthy]
            consensus:
              type: string
              enum: [healthy, degraded, unhealthy]
            scheduler:
              type: string
              enum: [healthy, degraded, unhealthy]

    ClusterStatus:
      type: object
      properties:
        node_id:
          type: string
          description: Current node identifier
        is_leader:
          type: boolean
          description: Whether this node is the cluster leader
        leader:
          type: string
          description: Current cluster leader node ID
        peers:
          type: integer
          description: Number of connected peer nodes
        status:
          type: string
          enum: [healthy, degraded, unhealthy]

    Node:
      type: object
      properties:
        id:
          type: string
          description: Unique node identifier
        address:
          type: string
          description: Network address of the node
        status:
          type: string
          enum: [online, offline, draining, error]
        models:
          type: array
          items:
            type: string
          description: List of models available on this node
        usage:
          $ref: '#/components/schemas/NodeUsage'
        last_seen:
          type: string
          format: date-time
        version:
          type: string

    NodeUsage:
      type: object
      properties:
        cpu:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: CPU usage percentage
        memory:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Memory usage percentage
        bandwidth:
          type: number
          format: float
          description: Network bandwidth usage in MB/s
        active_connections:
          type: integer
          description: Number of active connections

    Model:
      type: object
      properties:
        name:
          type: string
          description: Model name
        size:
          type: integer
          format: int64
          description: Model size in bytes
        status:
          type: string
          enum: [available, downloading, error, unavailable]
        replicas:
          type: array
          items:
            type: string
          description: List of nodes where this model is available
        inference_ready:
          type: boolean
          description: Whether the model is ready for inference
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        metadata:
          type: object
          description: Additional model metadata

    Transfer:
      type: object
      properties:
        id:
          type: string
          description: Unique transfer identifier
        model_name:
          type: string
          description: Name of the model being transferred
        type:
          type: string
          enum: [download, upload, sync]
        status:
          type: string
          enum: [active, completed, failed, cancelled]
        progress:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Transfer progress percentage
        speed:
          type: number
          format: float
          description: Transfer speed in bytes per second
        eta:
          type: integer
          description: Estimated time to completion in seconds
        peer_id:
          type: string
          description: Source peer identifier
        node_id:
          type: string
          description: Target node identifier
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time

    Metrics:
      type: object
      properties:
        node_id:
          type: string
        connected_peers:
          type: integer
        is_leader:
          type: boolean
        requests_processed:
          type: integer
        models_loaded:
          type: integer
        cluster_size:
          type: integer
        scheduler_stats:
          $ref: '#/components/schemas/SchedulerStats'
        uptime:
          type: string
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        cpu_usage:
          type: number
          format: float
        memory_usage:
          type: number
          format: float
        network_usage:
          type: number
          format: float
        requests_per_second:
          type: number
          format: float
        average_latency:
          type: number
          format: float
        active_connections:
          type: integer
        error_rate:
          type: number
          format: float

    SchedulerStats:
      type: object
      properties:
        total_requests:
          type: integer
        completed_requests:
          type: integer
        failed_requests:
          type: integer
        queued_requests:
          type: integer
        average_latency:
          type: number
          format: float

    GenerateRequest:
      type: object
      required:
        - model
        - prompt
      properties:
        model:
          type: string
          description: Model name to use for generation
        prompt:
          type: string
          description: Input prompt for text generation
        stream:
          type: boolean
          default: false
          description: Whether to stream the response
        options:
          type: object
          description: Additional generation options

    GenerateResponse:
      type: object
      properties:
        response:
          type: string
          description: Generated text response
        model:
          type: string
          description: Model used for generation
        node_id:
          type: string
          description: Node that processed the request
        created_at:
          type: string
          format: date-time

    ChatMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [system, user, assistant]
        content:
          type: string

    ChatRequest:
      type: object
      required:
        - model
        - messages
      properties:
        model:
          type: string
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        stream:
          type: boolean
          default: false
        options:
          type: object

    ChatResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ChatMessage'
        model:
          type: string
        node_id:
          type: string
        created_at:
          type: string
          format: date-time

    EmbeddingsRequest:
      type: object
      required:
        - model
        - input
      properties:
        model:
          type: string
        input:
          type: string
        options:
          type: object

    EmbeddingsResponse:
      type: object
      properties:
        embeddings:
          type: array
          items:
            type: number
            format: float
        model:
          type: string
        node_id:
          type: string

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time

paths:
  /health:
    get:
      summary: Health Check
      description: Returns the health status of the distributed system
      operationId: getHealth
      tags:
        - Health & Status
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: System unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cluster/status:
    get:
      summary: Cluster Status
      description: Returns detailed cluster status information
      operationId: getClusterStatus
      tags:
        - Cluster Management
      responses:
        '200':
          description: Cluster status information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterStatus'

  /nodes:
    get:
      summary: List All Nodes
      description: Returns all nodes in the distributed cluster
      operationId: listNodes
      tags:
        - Node Management
      responses:
        '200':
          description: List of cluster nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/Node'

  /nodes/{nodeId}:
    get:
      summary: Get Node Details
      description: Returns information about a specific node
      operationId: getNode
      tags:
        - Node Management
      parameters:
        - name: nodeId
          in: path
          required: true
          schema:
            type: string
          description: Node identifier
      responses:
        '200':
          description: Node information
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    $ref: '#/components/schemas/Node'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nodes/{nodeId}/drain:
    post:
      summary: Drain Node
      description: Drains a node (prevents new requests from being routed to it)
      operationId: drainNode
      tags:
        - Node Management
      security:
        - BearerAuth: []
      parameters:
        - name: nodeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Node drain initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /nodes/{nodeId}/undrain:
    post:
      summary: Undrain Node
      description: Removes drain status from a node
      operationId: undrainNode
      tags:
        - Node Management
      security:
        - BearerAuth: []
      parameters:
        - name: nodeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Node undrain completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /models:
    get:
      summary: List Models
      description: Returns all models available in the distributed system
      operationId: listModels
      tags:
        - Model Management
      responses:
        '200':
          description: List of available models
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/Model'

  /models/{modelName}:
    get:
      summary: Get Model Details
      description: Returns information about a specific model
      operationId: getModel
      tags:
        - Model Management
      parameters:
        - name: modelName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model information
          content:
            application/json:
              schema:
                type: object
                properties:
                  model:
                    $ref: '#/components/schemas/Model'
        '404':
          description: Model not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Model
      description: Removes a model from the distributed system
      operationId: deleteModel
      tags:
        - Model Management
      security:
        - BearerAuth: []
      parameters:
        - name: modelName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  request_id:
                    type: string
                  node_id:
                    type: string

  /models/{modelName}/download:
    post:
      summary: Download Model
      description: Initiates download of a model to the distributed system
      operationId: downloadModel
      tags:
        - Model Management
      security:
        - BearerAuth: []
      parameters:
        - name: modelName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model download initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  node_id:
                    type: string

  /generate:
    post:
      summary: Generate Text
      description: Generates text using a distributed model
      operationId: generateText
      tags:
        - Inference
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRequest'
      responses:
        '200':
          description: Text generation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chat:
    post:
      summary: Chat Completion
      description: Performs chat completion using a distributed model
      operationId: chatCompletion
      tags:
        - Inference
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: Chat completion successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'

  /embeddings:
    post:
      summary: Generate Embeddings
      description: Generates embeddings using a distributed model
      operationId: generateEmbeddings
      tags:
        - Inference
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingsRequest'
      responses:
        '200':
          description: Embeddings generation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingsResponse'

  /metrics:
    get:
      summary: System Metrics
      description: Returns comprehensive system metrics
      operationId: getMetrics
      tags:
        - Monitoring
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'

  /transfers:
    get:
      summary: List Transfers
      description: Returns all active and recent model transfers
      operationId: listTransfers
      tags:
        - Transfer Management
      responses:
        '200':
          description: List of transfers
          content:
            application/json:
              schema:
                type: object
                properties:
                  transfers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transfer'

  /transfers/{transferId}:
    get:
      summary: Get Transfer Details
      description: Returns information about a specific transfer
      operationId: getTransfer
      tags:
        - Transfer Management
      parameters:
        - name: transferId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transfer information
          content:
            application/json:
              schema:
                type: object
                properties:
                  transfer:
                    $ref: '#/components/schemas/Transfer'

tags:
  - name: Health & Status
    description: System health monitoring and status endpoints
  - name: Cluster Management
    description: Cluster-wide operations and information
  - name: Node Management
    description: Individual node management and monitoring
  - name: Model Management
    description: AI model distribution and lifecycle management
  - name: Inference
    description: AI model inference endpoints
  - name: Transfer Management
    description: Model transfer and synchronization operations
  - name: Monitoring
    description: Performance metrics and system monitoring