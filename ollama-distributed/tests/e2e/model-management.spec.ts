import { test, expect, Page } from '@playwright/test'\n\n/**\n * Model Management E2E Tests\n * \n * Comprehensive testing of model management functionality including:\n * - Model discovery and listing\n * - Model deployment across nodes\n * - Model version management\n * - Download progress tracking\n * - Model removal and cleanup\n * - Resource management\n * - Performance optimization\n */\n\ntest.describe('Model Management', () => {\n  test.beforeEach(async ({ page }) => {\n    // Mock authentication\n    await page.route('**/api/auth/me', route => {\n      route.fulfill({\n        status: 200,\n        body: JSON.stringify({\n          user: { id: 1, email: 'admin@example.com', role: 'admin' },\n          token: 'mock-admin-jwt-token'\n        })\n      })\n    })\n\n    // Mock models API\n    await page.route('**/api/models', route => {\n      if (route.request().method() === 'GET') {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            models: [\n              {\n                id: 'llama2:7b',\n                name: 'Llama 2 7B',\n                version: '7b',\n                size: '3.8GB',\n                status: 'available',\n                nodes: ['node-1', 'node-2'],\n                downloads: 1250,\n                lastUsed: '2024-01-15T10:30:00Z',\n                description: 'Large language model for general-purpose tasks',\n                tags: ['llm', 'general'],\n                performance: {\n                  averageLatency: 145,\n                  throughput: 23,\n                  memoryUsage: '4.2GB'\n                }\n              },\n              {\n                id: 'codellama:13b',\n                name: 'Code Llama 13B',\n                version: '13b',\n                size: '7.3GB',\n                status: 'downloading',\n                nodes: ['node-1'],\n                downloads: 456,\n                lastUsed: '2024-01-14T15:20:00Z',\n                description: 'Specialized model for code generation',\n                tags: ['llm', 'code'],\n                downloadProgress: 65,\n                performance: {\n                  averageLatency: 230,\n                  throughput: 18,\n                  memoryUsage: '8.1GB'\n                }\n              },\n              {\n                id: 'mistral:7b',\n                name: 'Mistral 7B',\n                version: '7b',\n                size: '4.1GB',\n                status: 'failed',\n                nodes: [],\n                downloads: 89,\n                lastUsed: '2024-01-13T09:15:00Z',\n                description: 'Efficient language model with high performance',\n                tags: ['llm', 'efficient'],\n                error: 'Download failed: Connection timeout',\n                performance: null\n              }\n            ],\n            totalSize: '15.2GB',\n            availableSpace: '150GB',\n            totalModels: 3\n          })\n        })\n      }\n    })\n\n    // Mock node status\n    await page.route('**/api/nodes', route => {\n      route.fulfill({\n        status: 200,\n        body: JSON.stringify({\n          nodes: [\n            { id: 'node-1', status: 'healthy', availableSpace: '50GB', models: 2 },\n            { id: 'node-2', status: 'healthy', availableSpace: '75GB', models: 1 },\n            { id: 'node-3', status: 'healthy', availableSpace: '100GB', models: 0 }\n          ]\n        })\n      })\n    })\n\n    // Login as admin\n    await page.goto('/v2/auth/login')\n    await page.fill('input[type=\"email\"]', 'admin@example.com')\n    await page.fill('input[type=\"password\"]', 'AdminPass123!')\n    await page.click('button[type=\"submit\"]')\n  })\n\n  test.describe('Model Discovery and Listing', () => {\n    test('displays model inventory with details', async ({ page }) => {\n      await page.goto('/v2/models')\n      \n      // Verify models page loads\n      await expect(page.locator('h1')).toContainText(/model/i)\n      await expect(page.locator('text=Model Inventory')).toBeVisible()\n      \n      // Verify model cards are displayed\n      await expect(page.locator('[data-model=\"llama2:7b\"]')).toBeVisible()\n      await expect(page.locator('[data-model=\"codellama:13b\"]')).toBeVisible()\n      await expect(page.locator('[data-model=\"mistral:7b\"]')).toBeVisible()\n      \n      // Verify model details\n      const llama2Card = page.locator('[data-model=\"llama2:7b\"]')\n      await expect(llama2Card.locator('text=Llama 2 7B')).toBeVisible()\n      await expect(llama2Card.locator('text=3.8GB')).toBeVisible()\n      await expect(llama2Card.locator('text=1250')).toBeVisible() // Downloads\n    })\n\n    test('shows different model statuses correctly', async ({ page }) => {\n      await page.goto('/v2/models')\n      \n      // Available model\n      await expect(page.locator('[data-model=\"llama2:7b\"][data-status=\"available\"]')).toBeVisible()\n      \n      // Downloading model with progress\n      const downloadingModel = page.locator('[data-model=\"codellama:13b\"][data-status=\"downloading\"]')\n      await expect(downloadingModel).toBeVisible()\n      await expect(downloadingModel.locator('text=65%')).toBeVisible()\n      \n      // Failed model with error\n      const failedModel = page.locator('[data-model=\"mistral:7b\"][data-status=\"failed\"]')\n      await expect(failedModel).toBeVisible()\n      await expect(failedModel.locator('text=Connection timeout')).toBeVisible()\n    })\n\n    test('filters models by status and tags', async ({ page }) => {\n      await page.goto('/v2/models')\n      \n      // Filter by status\n      await page.selectOption('select[name=\"status-filter\"]', 'available')\n      await expect(page.locator('[data-model=\"llama2:7b\"]')).toBeVisible()\n      await expect(page.locator('[data-model=\"codellama:13b\"]')).not.toBeVisible()\n      \n      // Clear status filter\n      await page.selectOption('select[name=\"status-filter\"]', 'all')\n      \n      // Filter by tag\n      await page.selectOption('select[name=\"tag-filter\"]', 'code')\n      await expect(page.locator('[data-model=\"codellama:13b\"]')).toBeVisible()\n      await expect(page.locator('[data-model=\"llama2:7b\"]')).not.toBeVisible()\n    })\n\n    test('searches models by name and description', async ({ page }) => {\n      await page.goto('/v2/models')\n      \n      // Search by name\n      await page.fill('input[name=\"model-search\"]', 'llama')\n      await expect(page.locator('[data-model=\"llama2:7b\"]')).toBeVisible()\n      await expect(page.locator('[data-model=\"codellama:13b\"]')).toBeVisible()\n      await expect(page.locator('[data-model=\"mistral:7b\"]')).not.toBeVisible()\n      \n      // Search by description keyword\n      await page.fill('input[name=\"model-search\"]', 'code generation')\n      await expect(page.locator('[data-model=\"codellama:13b\"]')).toBeVisible()\n      await expect(page.locator('[data-model=\"llama2:7b\"]')).not.toBeVisible()\n    })\n\n    test('displays model performance metrics', async ({ page }) => {\n      await page.goto('/v2/models')\n      \n      // Click on model to view details\n      await page.click('[data-model=\"llama2:7b\"] button:has-text(\"View Details\")')\n      \n      // Verify performance metrics modal\n      await expect(page.locator('[role=\"dialog\"]')).toBeVisible()\n      await expect(page.locator('text=Performance Metrics')).toBeVisible()\n      \n      // Verify specific metrics\n      await expect(page.locator('text=Average Latency: 145ms')).toBeVisible()\n      await expect(page.locator('text=Throughput: 23 tokens/s')).toBeVisible()\n      await expect(page.locator('text=Memory Usage: 4.2GB')).toBeVisible()\n    })\n  })\n\n  test.describe('Model Deployment', () => {\n    test('deploys model to selected nodes', async ({ page }) => {\n      // Mock deployment API\n      await page.route('**/api/models/*/deploy', route => {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            deploymentId: 'deploy-123',\n            message: 'Deployment initiated',\n            estimatedTime: 300 // seconds\n          })\n        })\n      })\n\n      await page.goto('/v2/models')\n      \n      // Click deploy button for mistral model (not currently deployed)\n      await page.click('[data-model=\"mistral:7b\"] button:has-text(\"Deploy\")')\n      \n      // Verify deployment modal opens\n      await expect(page.locator('[role=\"dialog\"]')).toBeVisible()\n      await expect(page.locator('text=Deploy Model')).toBeVisible()\n      \n      // Select target nodes\n      await page.check('input[type=\"checkbox\"][value=\"node-2\"]')\n      await page.check('input[type=\"checkbox\"][value=\"node-3\"]')\n      \n      // Verify space availability warnings\n      await expect(page.locator('text=Estimated space required: 4.1GB')).toBeVisible()\n      await expect(page.locator('[data-node=\"node-2\"] text=Available: 75GB')).toBeVisible()\n      \n      // Confirm deployment\n      await page.click('button:has-text(\"Start Deployment\")')\n      \n      // Verify deployment initiated\n      await expect(page.locator('text=Deployment initiated')).toBeVisible()\n      await expect(page.locator('text=Estimated time: 5 minutes')).toBeVisible()\n    })\n\n    test('prevents deployment to nodes with insufficient space', async ({ page }) => {\n      // Mock node with insufficient space\n      await page.route('**/api/nodes', route => {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            nodes: [\n              { id: 'node-1', status: 'healthy', availableSpace: '2GB', models: 2 },\n              { id: 'node-2', status: 'healthy', availableSpace: '75GB', models: 1 }\n            ]\n          })\n        })\n      })\n\n      await page.goto('/v2/models')\n      \n      // Try to deploy large model\n      await page.click('[data-model=\"codellama:13b\"] button:has-text(\"Deploy\")')\n      \n      // Select node with insufficient space\n      const node1Checkbox = page.locator('input[type=\"checkbox\"][value=\"node-1\"]')\n      await expect(node1Checkbox).toBeDisabled()\n      \n      // Verify warning message\n      await expect(page.locator('text=Insufficient space')).toBeVisible()\n      await expect(page.locator('[data-node=\"node-1\"] text=Need: 7.3GB, Available: 2GB')).toBeVisible()\n    })\n\n    test('tracks deployment progress in real-time', async ({ page }) => {\n      // Mock deployment progress API\n      let progressStep = 0\n      await page.route('**/api/deployments/*/progress', route => {\n        progressStep += 25\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            progress: Math.min(progressStep, 100),\n            status: progressStep >= 100 ? 'completed' : 'in_progress',\n            message: progressStep >= 100 ? 'Deployment completed' : `Downloading... ${progressStep}%`,\n            estimatedTimeRemaining: progressStep >= 100 ? 0 : Math.max(0, 300 - (progressStep * 3))\n          })\n        })\n      })\n\n      await page.goto('/v2/models')\n      \n      // Start deployment\n      await page.click('[data-model=\"mistral:7b\"] button:has-text(\"Deploy\")')\n      await page.check('input[type=\"checkbox\"][value=\"node-3\"]')\n      await page.click('button:has-text(\"Start Deployment\")')\n      \n      // Verify progress tracking\n      await expect(page.locator('[data-deployment=\"deploy-123\"]')).toBeVisible()\n      \n      // Progress should update (mocked to increase by 25% each call)\n      for (let i = 25; i <= 100; i += 25) {\n        await page.waitForTimeout(1000)\n        await expect(page.locator(`text=${i}%`)).toBeVisible()\n      }\n      \n      // Verify completion\n      await expect(page.locator('text=Deployment completed')).toBeVisible()\n      await expect(page.locator('[data-status=\"completed\"]')).toBeVisible()\n    })\n\n    test('handles deployment failures gracefully', async ({ page }) => {\n      // Mock deployment failure\n      await page.route('**/api/models/*/deploy', route => {\n        route.fulfill({\n          status: 500,\n          body: JSON.stringify({\n            error: 'Deployment failed: Network timeout during download'\n          })\n        })\n      })\n\n      await page.goto('/v2/models')\n      \n      // Try to deploy model\n      await page.click('[data-model=\"mistral:7b\"] button:has-text(\"Deploy\")')\n      await page.check('input[type=\"checkbox\"][value=\"node-3\"]')\n      await page.click('button:has-text(\"Start Deployment\")')\n      \n      // Verify error message\n      await expect(page.locator('text=Deployment failed')).toBeVisible()\n      await expect(page.locator('text=Network timeout during download')).toBeVisible()\n      \n      // Should offer retry option\n      await expect(page.locator('button:has-text(\"Retry Deployment\")')).toBeVisible()\n    })\n  })\n\n  test.describe('Model Removal', () => {\n    test('removes model from specific nodes', async ({ page }) => {\n      // Mock removal API\n      await page.route('**/api/models/*/remove', route => {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            message: 'Model removed successfully',\n            spacedFreed: '3.8GB'\n          })\n        })\n      })\n\n      await page.goto('/v2/models')\n      \n      // Click remove button for deployed model\n      await page.click('[data-model=\"llama2:7b\"] button:has-text(\"Remove\")')\n      \n      // Verify removal modal\n      await expect(page.locator('[role=\"dialog\"]')).toBeVisible()\n      await expect(page.locator('text=Remove Model')).toBeVisible()\n      \n      // Select nodes to remove from\n      await page.check('input[type=\"checkbox\"][value=\"node-1\"]')\n      \n      // Verify impact information\n      await expect(page.locator('text=Space to be freed: 3.8GB')).toBeVisible()\n      await expect(page.locator('text=Active sessions will be terminated')).toBeVisible()\n      \n      // Confirm removal\n      await page.click('button:has-text(\"Confirm Removal\")')\n      \n      // Verify success\n      await expect(page.locator('text=Model removed successfully')).toBeVisible()\n      await expect(page.locator('text=Freed 3.8GB of space')).toBeVisible()\n    })\n\n    test('prevents removal of models in active use', async ({ page }) => {\n      // Mock active sessions API\n      await page.route('**/api/models/*/sessions', route => {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            activeSessions: [\n              { id: 'session-1', user: 'user@example.com', startedAt: '2024-01-15T10:00:00Z' },\n              { id: 'session-2', user: 'admin@example.com', startedAt: '2024-01-15T10:15:00Z' }\n            ]\n          })\n        })\n      })\n\n      await page.goto('/v2/models')\n      \n      // Try to remove model with active sessions\n      await page.click('[data-model=\"llama2:7b\"] button:has-text(\"Remove\")')\n      \n      // Verify warning about active sessions\n      await expect(page.locator('text=Active Sessions Detected')).toBeVisible()\n      await expect(page.locator('text=2 active sessions')).toBeVisible()\n      await expect(page.locator('text=user@example.com')).toBeVisible()\n      \n      // Removal should require force confirmation\n      const removeButton = page.locator('button:has-text(\"Confirm Removal\")')\n      await expect(removeButton).toBeDisabled()\n      \n      // Enable force removal\n      await page.check('input[type=\"checkbox\"][name=\"force-removal\"]')\n      await expect(removeButton).toBeEnabled()\n    })\n\n    test('bulk removal of multiple models', async ({ page }) => {\n      await page.goto('/v2/models')\n      \n      // Enable bulk mode\n      await page.click('button:has-text(\"Bulk Actions\")')\n      \n      // Select multiple models\n      await page.check('[data-model=\"llama2:7b\"] input[type=\"checkbox\"]')\n      await page.check('[data-model=\"codellama:13b\"] input[type=\"checkbox\"]')\n      \n      // Verify bulk action bar appears\n      await expect(page.locator('[data-bulk-actions]')).toBeVisible()\n      await expect(page.locator('text=2 models selected')).toBeVisible()\n      \n      // Click bulk remove\n      await page.click('button:has-text(\"Remove Selected\")')\n      \n      // Verify bulk removal confirmation\n      await expect(page.locator('text=Remove 2 Models')).toBeVisible()\n      await expect(page.locator('text=Total space to be freed: 11.1GB')).toBeVisible()\n    })\n  })\n\n  test.describe('Model Discovery and Installation', () => {\n    test('browses available models from registry', async ({ page }) => {\n      // Mock model registry API\n      await page.route('**/api/registry/models', route => {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            models: [\n              {\n                id: 'phi:3b',\n                name: 'Phi 3B',\n                description: 'Small but powerful language model',\n                size: '1.9GB',\n                tags: ['llm', 'small', 'efficient'],\n                downloads: 25000,\n                rating: 4.7,\n                lastUpdated: '2024-01-10T12:00:00Z'\n              },\n              {\n                id: 'falcon:7b',\n                name: 'Falcon 7B',\n                description: 'High-performance language model',\n                size: '4.2GB',\n                tags: ['llm', 'performance'],\n                downloads: 18000,\n                rating: 4.5,\n                lastUpdated: '2024-01-08T10:30:00Z'\n              }\n            ]\n          })\n        })\n      })\n\n      await page.goto('/v2/models/discover')\n      \n      // Verify model discovery page\n      await expect(page.locator('text=Discover Models')).toBeVisible()\n      await expect(page.locator('[data-registry-model=\"phi:3b\"]')).toBeVisible()\n      await expect(page.locator('[data-registry-model=\"falcon:7b\"]')).toBeVisible()\n      \n      // Verify model details\n      const phiModel = page.locator('[data-registry-model=\"phi:3b\"]')\n      await expect(phiModel.locator('text=Phi 3B')).toBeVisible()\n      await expect(phiModel.locator('text=1.9GB')).toBeVisible()\n      await expect(phiModel.locator('text=25,000')).toBeVisible() // Downloads\n      await expect(phiModel.locator('text=4.7')).toBeVisible() // Rating\n    })\n\n    test('installs new model from registry', async ({ page }) => {\n      // Mock installation API\n      await page.route('**/api/models/install', route => {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            installationId: 'install-456',\n            message: 'Installation started',\n            estimatedTime: 180\n          })\n        })\n      })\n\n      await page.goto('/v2/models/discover')\n      \n      // Click install button\n      await page.click('[data-registry-model=\"phi:3b\"] button:has-text(\"Install\")')\n      \n      // Verify installation modal\n      await expect(page.locator('[role=\"dialog\"]')).toBeVisible()\n      await expect(page.locator('text=Install Phi 3B')).toBeVisible()\n      \n      // Select installation nodes\n      await page.check('input[type=\"checkbox\"][value=\"node-1\"]')\n      await page.check('input[type=\"checkbox\"][value=\"node-2\"]')\n      \n      // Confirm installation\n      await page.click('button:has-text(\"Start Installation\")')\n      \n      // Verify installation started\n      await expect(page.locator('text=Installation started')).toBeVisible()\n      await expect(page.locator('[data-installation=\"install-456\"]')).toBeVisible()\n    })\n\n    test('shows model compatibility and requirements', async ({ page }) => {\n      await page.goto('/v2/models/discover')\n      \n      // Click on model for details\n      await page.click('[data-registry-model=\"falcon:7b\"] button:has-text(\"Details\")')\n      \n      // Verify requirements modal\n      await expect(page.locator('[role=\"dialog\"]')).toBeVisible()\n      await expect(page.locator('text=Model Requirements')).toBeVisible()\n      \n      // Verify system requirements\n      await expect(page.locator('text=Minimum RAM: 8GB')).toBeVisible()\n      await expect(page.locator('text=Recommended: 16GB')).toBeVisible()\n      await expect(page.locator('text=GPU: Optional (CUDA 11.8+)')).toBeVisible()\n      \n      // Verify compatibility with current nodes\n      await expect(page.locator('[data-node=\"node-1\"][data-compatible=\"true\"]')).toBeVisible()\n      await expect(page.locator('[data-node=\"node-2\"][data-compatible=\"true\"]')).toBeVisible()\n    })\n  })\n\n  test.describe('Model Versioning', () => {\n    test('displays available model versions', async ({ page }) => {\n      // Mock model versions API\n      await page.route('**/api/models/llama2:7b/versions', route => {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            versions: [\n              { version: '7b-v2.1', size: '3.8GB', released: '2024-01-15T00:00:00Z', current: true },\n              { version: '7b-v2.0', size: '3.7GB', released: '2024-01-01T00:00:00Z', current: false },\n              { version: '7b-v1.5', size: '3.6GB', released: '2023-12-15T00:00:00Z', current: false }\n            ]\n          })\n        })\n      })\n\n      await page.goto('/v2/models')\n      \n      // Click version info for a model\n      await page.click('[data-model=\"llama2:7b\"] button:has-text(\"Versions\")')\n      \n      // Verify versions modal\n      await expect(page.locator('[role=\"dialog\"]')).toBeVisible()\n      await expect(page.locator('text=Model Versions')).toBeVisible()\n      \n      // Verify version list\n      await expect(page.locator('[data-version=\"7b-v2.1\"][data-current=\"true\"]')).toBeVisible()\n      await expect(page.locator('[data-version=\"7b-v2.0\"]')).toBeVisible()\n      await expect(page.locator('[data-version=\"7b-v1.5\"]')).toBeVisible()\n      \n      // Verify current version indicator\n      await expect(page.locator('[data-version=\"7b-v2.1\"] text=Current')).toBeVisible()\n    })\n\n    test('upgrades to newer model version', async ({ page }) => {\n      // Mock upgrade API\n      await page.route('**/api/models/*/upgrade', route => {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            upgradeId: 'upgrade-789',\n            message: 'Upgrade initiated',\n            fromVersion: '7b-v2.0',\n            toVersion: '7b-v2.1'\n          })\n        })\n      })\n\n      await page.goto('/v2/models')\n      \n      // Open versions modal\n      await page.click('[data-model=\"llama2:7b\"] button:has-text(\"Versions\")')\n      \n      // Click upgrade to newer version\n      await page.click('[data-version=\"7b-v2.1\"] button:has-text(\"Upgrade\")')\n      \n      // Verify upgrade confirmation\n      await expect(page.locator('text=Upgrade Model')).toBeVisible()\n      await expect(page.locator('text=7b-v2.0 → 7b-v2.1')).toBeVisible()\n      \n      // Confirm upgrade\n      await page.click('button:has-text(\"Start Upgrade\")')\n      \n      // Verify upgrade started\n      await expect(page.locator('text=Upgrade initiated')).toBeVisible()\n      await expect(page.locator('[data-upgrade=\"upgrade-789\"]')).toBeVisible()\n    })\n\n    test('rolls back to previous model version', async ({ page }) => {\n      // Mock rollback API\n      await page.route('**/api/models/*/rollback', route => {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            rollbackId: 'rollback-101',\n            message: 'Rollback initiated',\n            fromVersion: '7b-v2.1',\n            toVersion: '7b-v2.0'\n          })\n        })\n      })\n\n      await page.goto('/v2/models')\n      \n      // Open versions modal\n      await page.click('[data-model=\"llama2:7b\"] button:has-text(\"Versions\")')\n      \n      // Click rollback to previous version\n      await page.click('[data-version=\"7b-v2.0\"] button:has-text(\"Rollback\")')\n      \n      // Verify rollback warning\n      await expect(page.locator('text=Rollback Warning')).toBeVisible()\n      await expect(page.locator('text=This will downgrade your model')).toBeVisible()\n      \n      // Confirm rollback\n      await page.check('input[type=\"checkbox\"][name=\"confirm-rollback\"]')\n      await page.click('button:has-text(\"Confirm Rollback\")')\n      \n      // Verify rollback started\n      await expect(page.locator('text=Rollback initiated')).toBeVisible()\n    })\n  })\n\n  test.describe('Resource Management', () => {\n    test('displays cluster storage overview', async ({ page }) => {\n      await page.goto('/v2/models')\n      \n      // Verify storage overview panel\n      await expect(page.locator('text=Storage Overview')).toBeVisible()\n      await expect(page.locator('text=Total Used: 15.2GB')).toBeVisible()\n      await expect(page.locator('text=Available: 150GB')).toBeVisible()\n      await expect(page.locator('text=Models: 3')).toBeVisible()\n      \n      // Verify storage breakdown by node\n      await expect(page.locator('[data-node=\"node-1\"] text=50GB available')).toBeVisible()\n      await expect(page.locator('[data-node=\"node-2\"] text=75GB available')).toBeVisible()\n      await expect(page.locator('[data-node=\"node-3\"] text=100GB available')).toBeVisible()\n    })\n\n    test('optimizes model distribution across nodes', async ({ page }) => {\n      // Mock optimization API\n      await page.route('**/api/models/optimize', route => {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            optimizationId: 'opt-123',\n            recommendations: [\n              {\n                action: 'move',\n                model: 'llama2:7b',\n                from: 'node-1',\n                to: 'node-3',\n                reason: 'Balance storage usage'\n              },\n              {\n                action: 'replicate',\n                model: 'codellama:13b',\n                to: 'node-2',\n                reason: 'Improve availability'\n              }\n            ],\n            estimatedImprovement: '15% better load distribution'\n          })\n        })\n      })\n\n      await page.goto('/v2/models')\n      \n      // Click optimize button\n      await page.click('button:has-text(\"Optimize Distribution\")')\n      \n      // Verify optimization recommendations\n      await expect(page.locator('[role=\"dialog\"]')).toBeVisible()\n      await expect(page.locator('text=Optimization Recommendations')).toBeVisible()\n      \n      // Verify specific recommendations\n      await expect(page.locator('text=Move llama2:7b from node-1 to node-3')).toBeVisible()\n      await expect(page.locator('text=Replicate codellama:13b to node-2')).toBeVisible()\n      await expect(page.locator('text=15% better load distribution')).toBeVisible()\n      \n      // Apply optimizations\n      await page.click('button:has-text(\"Apply Optimizations\")')\n      \n      // Verify optimization started\n      await expect(page.locator('text=Optimization started')).toBeVisible()\n    })\n\n    test('cleans up unused model data', async ({ page }) => {\n      // Mock cleanup API\n      await page.route('**/api/models/cleanup', route => {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            cleanupItems: [\n              { type: 'cache', size: '2.1GB', location: 'node-1' },\n              { type: 'temp_files', size: '500MB', location: 'node-2' },\n              { type: 'old_versions', size: '3.8GB', location: 'all_nodes' }\n            ],\n            totalSpaceRecoverable: '6.4GB'\n          })\n        })\n      })\n\n      await page.goto('/v2/models')\n      \n      // Click cleanup button\n      await page.click('button:has-text(\"Cleanup\")')\n      \n      // Verify cleanup analysis\n      await expect(page.locator('[role=\"dialog\"]')).toBeVisible()\n      await expect(page.locator('text=Storage Cleanup')).toBeVisible()\n      await expect(page.locator('text=6.4GB can be recovered')).toBeVisible()\n      \n      // Verify cleanup items\n      await expect(page.locator('text=Cache files: 2.1GB')).toBeVisible()\n      await expect(page.locator('text=Temporary files: 500MB')).toBeVisible()\n      await expect(page.locator('text=Old versions: 3.8GB')).toBeVisible()\n      \n      // Select cleanup items\n      await page.check('input[type=\"checkbox\"][data-cleanup=\"cache\"]')\n      await page.check('input[type=\"checkbox\"][data-cleanup=\"temp_files\"]')\n      \n      // Start cleanup\n      await page.click('button:has-text(\"Start Cleanup\")')\n      \n      // Verify cleanup progress\n      await expect(page.locator('text=Cleanup in progress')).toBeVisible()\n    })\n  })\n\n  test.describe('Performance Monitoring', () => {\n    test('displays model usage analytics', async ({ page }) => {\n      // Mock analytics API\n      await page.route('**/api/models/analytics', route => {\n        route.fulfill({\n          status: 200,\n          body: JSON.stringify({\n            usage: {\n              'llama2:7b': {\n                requests: 1250,\n                averageLatency: 145,\n                successRate: 98.5,\n                peakUsage: '2024-01-15T14:30:00Z'\n              },\n              'codellama:13b': {\n                requests: 456,\n                averageLatency: 230,\n                successRate: 97.2,\n                peakUsage: '2024-01-14T16:45:00Z'\n              }\n            },\n            timeRange: '24h'\n          })\n        })\n      })\n\n      await page.goto('/v2/models/analytics')\n      \n      // Verify analytics dashboard\n      await expect(page.locator('text=Model Analytics')).toBeVisible()\n      \n      // Verify usage metrics\n      await expect(page.locator('[data-model=\"llama2:7b\"] text=1,250 requests')).toBeVisible()\n      await expect(page.locator('[data-model=\"llama2:7b\"] text=145ms avg latency')).toBeVisible()\n      await expect(page.locator('[data-model=\"llama2:7b\"] text=98.5% success')).toBeVisible()\n      \n      // Verify comparison between models\n      await expect(page.locator('[data-model=\"codellama:13b\"] text=456 requests')).toBeVisible()\n      await expect(page.locator('[data-model=\"codellama:13b\"] text=230ms avg latency')).toBeVisible()\n    })\n\n    test('sets up performance alerts', async ({ page }) => {\n      await page.goto('/v2/models/analytics')\n      \n      // Click alert setup\n      await page.click('button:has-text(\"Setup Alerts\")')\n      \n      // Configure alert thresholds\n      await page.fill('input[name=\"latency-threshold\"]', '500')\n      await page.fill('input[name=\"error-rate-threshold\"]', '5')\n      await page.fill('input[name=\"usage-threshold\"]', '1000')\n      \n      // Select notification methods\n      await page.check('input[type=\"checkbox\"][value=\"email\"]')\n      await page.check('input[type=\"checkbox\"][value=\"webhook\"]')\n      \n      // Save alert configuration\n      await page.click('button:has-text(\"Save Alert Rules\")')\n      \n      // Verify confirmation\n      await expect(page.locator('text=Alert rules configured')).toBeVisible()\n    })\n  })\n})"