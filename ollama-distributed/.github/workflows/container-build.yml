name: 🐳 Container Build and Publish

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/ollama-distributed

jobs:
  # Build and test the container image
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-labels: ${{ steps.meta.outputs.labels }}

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: 🔐 Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=OllamaMax
          org.opencontainers.image.description=Enterprise Distributed AI Platform
          org.opencontainers.image.vendor=OllamaMax
          org.opencontainers.image.licenses=MIT

    - name: 🏗️ Build and push container image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          BUILD_TIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          GIT_COMMIT=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: true
        sbom: true

    - name: 🔍 Run container security scan
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload security scan results
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🧪 Test container image
      run: |
        echo "🧪 Testing container image..."
        
        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Test basic functionality
        echo "Testing container startup..."
        docker run --rm --name ollama-test \
          -e OLLAMA_LOG_LEVEL=debug \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          ollama-distributed version
        
        # Test health check
        echo "Testing health check..."
        docker run --rm -d --name ollama-health-test \
          -p 8080:8080 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Wait for startup
        sleep 30
        
        # Check health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Cleanup
        docker stop ollama-health-test || true
        
        echo "✅ Container tests passed!"

  # Multi-architecture build verification
  verify-multiarch:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
    - name: 🔧 Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🧪 Test platform-specific image
      run: |
        echo "🧪 Testing ${{ matrix.platform }} image..."
        
        # Pull platform-specific image
        docker pull --platform ${{ matrix.platform }} \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Test version command
        docker run --rm --platform ${{ matrix.platform }} \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          ollama-distributed version
        
        echo "✅ ${{ matrix.platform }} image verified!"

  # Generate container bill of materials
  generate-sbom:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📋 Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: 📤 Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: container-sbom
        path: sbom.spdx.json
        retention-days: 90

  # Performance benchmarking of container
  performance-benchmark:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📊 Run performance benchmarks
      run: |
        echo "📊 Running container performance benchmarks..."
        
        # Start container for benchmarking
        docker run -d --name ollama-benchmark \
          -p 8080:8080 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Wait for startup
        sleep 60
        
        # Run basic performance tests
        echo "Testing API response time..."
        time curl -f http://localhost:8080/health
        
        # Test memory usage
        echo "Checking memory usage..."
        docker stats ollama-benchmark --no-stream --format "table {{.MemUsage}}\t{{.CPUPerc}}"
        
        # Cleanup
        docker stop ollama-benchmark
        docker rm ollama-benchmark
        
        echo "✅ Performance benchmarks completed!"

  # Update deployment manifests
  update-manifests:
    runs-on: ubuntu-latest
    needs: [build-and-test, verify-multiarch]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🔄 Update Kubernetes manifests
      run: |
        echo "🔄 Updating Kubernetes manifests with new image..."
        
        # Update image tag in Kubernetes manifests
        NEW_TAG="${{ github.sha }}"
        
        # Update Helm values
        if [ -f "deploy/kubernetes/helm/values.yaml" ]; then
          sed -i "s|tag:.*|tag: \"${NEW_TAG}\"|g" deploy/kubernetes/helm/values.yaml
        fi
        
        # Update Terraform module
        if [ -f "infrastructure/terraform/modules/ollama-cluster/main.tf" ]; then
          sed -i "s|:latest|:${NEW_TAG}|g" infrastructure/terraform/modules/ollama-cluster/main.tf
        fi
        
        echo "✅ Manifests updated with image tag: ${NEW_TAG}"
    
    - name: 📤 Commit manifest updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add .
          git commit -m "🤖 Update container image to ${{ github.sha }}"
          git push
        fi

  # Deployment notification
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [build-and-test, verify-multiarch, performance-benchmark]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: 📢 Deployment notification
      run: |
        if [ "${{ needs.build-and-test.result }}" == "success" ] && \
           [ "${{ needs.verify-multiarch.result }}" == "success" ] && \
           [ "${{ needs.performance-benchmark.result }}" == "success" ]; then
          echo "🎉 Container build and publish completed successfully!"
          echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "🏷️  Tags: ${{ needs.build-and-test.outputs.image-tags }}"
        else
          echo "❌ Container build or tests failed!"
          exit 1
        fi
