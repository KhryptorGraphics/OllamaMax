# OllamaMax Production Deployment Configuration
# Complete integration and deployment for zero-downtime production
apiVersion: v1
kind: Namespace
metadata:
  name: ollama-system
  labels:
    app.kubernetes.io/name: ollama-system
    app.kubernetes.io/version: "1.0.0"
    environment: production
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: ollama-config
  namespace: ollama-system
data:
  config.yaml: |
    # Production Configuration
    node:
      name: "${HOSTNAME}"
      data_dir: "/app/data"
      cluster_id: "ollama-production"
      environment: "production"
    
    # API server configuration
    api:
      listen_address: ":8080"
      enable_cors: true
      cors_origins: ["https://ollama.yourdomain.com", "https://api.yourdomain.com"]
      request_timeout: "30s"
      max_request_size: "100MB"
      rate_limiting:
        enabled: true
        requests_per_minute: 1000
        burst_size: 100
      compression:
        enabled: true
        level: 6
    
    # Database configuration
    database:
      host: "postgres-primary.database.svc.cluster.local"
      port: 5432
      database: "ollamamax"
      username: "ollamamax"
      ssl_mode: "require"
      max_connections: 100
      connection_timeout: "30s"
    
    # Redis configuration
    redis:
      host: "redis-master.database.svc.cluster.local"
      port: 6379
      database: 0
      pool_size: 100
      timeout: "5s"
    
    # P2P networking
    p2p:
      listen_address: "/ip4/0.0.0.0/tcp/9000"
      bootstrap_peers: []
      connection_timeout: "30s"
      max_connections: 100
      enable_nat_traversal: true
    
    # Monitoring
    monitoring:
      enabled: true
      metrics:
        enabled: true
        listen_address: ":9090"
        path: "/metrics"
      health_checks:
        enabled: true
        interval: "10s"
        timeout: "5s"
        endpoints: ["/health", "/ready"]
      tracing:
        enabled: true
        sampling_rate: 0.1
        jaeger_endpoint: "http://jaeger-collector:14268/api/traces"
    
    # Security
    security:
      enabled: true
      jwt_secret: "${JWT_SECRET}"
      tls:
        enabled: true
        cert_file: "/app/certs/tls.crt"
        key_file: "/app/certs/tls.key"
        min_version: "1.2"
    
    # Performance
    performance:
      optimization_enabled: true
      monitoring_enabled: true
      profiling_enabled: false
      gc_tuning:
        target_percentage: 100
        max_heap_size: "6GB"
      connection_pooling:
        max_idle_connections: 100
        max_open_connections: 1000
        connection_max_lifetime: "1h"
      caching:
        enabled: true
        max_size: "2GB"
        ttl: "1h"
    
    # Logging
    logging:
      level: "info"
      format: "json"
      output: "stdout"
      enable_structured_logging: true
      fields:
        service: "ollama-distributed"
        version: "${VERSION}"
        environment: "production"

  cors-allowed-origins: "https://ollama.yourdomain.com,https://api.yourdomain.com"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: ollama-secrets
  namespace: ollama-system
type: Opaque
data:
  jwt-secret: "Y2hhbmdlLXRoaXMtaW4tcHJvZHVjdGlvbiEhIQ=="  # change-this-in-production!!!
  database-password: "T2xsYW1hTWF4MjAyNSE="  # OllamaMax2025!
  redis-password: "UmVkaXNNYXgyMDI1IQ=="  # RedisMax2025!

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ollama-service-account
  namespace: ollama-system
  labels:
    app.kubernetes.io/name: ollama-distributed
    app.kubernetes.io/version: "1.0.0"

---
# ClusterRole for necessary permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ollama-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ollama-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: ollama-service-account
  namespace: ollama-system
roleRef:
  kind: ClusterRole
  name: ollama-cluster-role
  apiGroup: rbac.authorization.k8s.io

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-distributed
  namespace: ollama-system
  labels:
    app.kubernetes.io/name: ollama-distributed
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: api-server
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ollama-distributed
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ollama-distributed
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: api-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ollama-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: ollama-distributed
        image: ghcr.io/khryptorgraphics/ollamamax:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: p2p
          containerPort: 9000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: OLLAMA_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OLLAMA_CLUSTER_MODE
          value: "kubernetes"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: ollama-secrets
              key: jwt-secret
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ollama-secrets
              key: database-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ollama-secrets
              key: redis-password
        - name: VERSION
          value: "1.0.0"
        - name: GOMAXPROCS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: data
          mountPath: /app/data
        - name: models
          mountPath: /app/models
        - name: tls-certs
          mountPath: /app/certs
          readOnly: true
        resources:
          requests:
            cpu: "1000m"
            memory: "2Gi"
            ephemeral-storage: "10Gi"
          limits:
            cpu: "4000m"
            memory: "8Gi"
            ephemeral-storage: "20Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: config
        configMap:
          name: ollama-config
      - name: tls-certs
        secret:
          secretName: ollama-tls
          defaultMode: 0400
      - name: data
        persistentVolumeClaim:
          claimName: ollama-data
      - name: models
        persistentVolumeClaim:
          claimName: ollama-models
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - ollama-distributed
              topologyKey: kubernetes.io/hostname
      tolerations: []
      nodeSelector: {}

---
# PersistentVolumeClaim for data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ollama-data
  namespace: ollama-system
  labels:
    app.kubernetes.io/name: ollama-distributed
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
# PersistentVolumeClaim for models
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ollama-models
  namespace: ollama-system
  labels:
    app.kubernetes.io/name: ollama-distributed
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 500Gi
  storageClassName: shared-ssd

---
# Service for API
apiVersion: v1
kind: Service
metadata:
  name: ollama-api
  namespace: ollama-system
  labels:
    app.kubernetes.io/name: ollama-distributed
    app.kubernetes.io/component: api
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: ollama-distributed

---
# Service for P2P networking
apiVersion: v1
kind: Service
metadata:
  name: ollama-p2p
  namespace: ollama-system
  labels:
    app.kubernetes.io/name: ollama-distributed
    app.kubernetes.io/component: p2p
spec:
  type: ClusterIP
  ports:
  - name: p2p
    port: 9000
    targetPort: p2p
    protocol: TCP
  selector:
    app.kubernetes.io/name: ollama-distributed

---
# Service for metrics
apiVersion: v1
kind: Service
metadata:
  name: ollama-metrics
  namespace: ollama-system
  labels:
    app.kubernetes.io/name: ollama-distributed
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: ollama-distributed

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ollama-hpa
  namespace: ollama-system
  labels:
    app.kubernetes.io/name: ollama-distributed
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ollama-distributed
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ollama-pdb
  namespace: ollama-system
  labels:
    app.kubernetes.io/name: ollama-distributed
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ollama-distributed

---
# Ingress with NGINX
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ollama-ingress
  namespace: ollama-system
  labels:
    app.kubernetes.io/name: ollama-distributed
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-burst: "200"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.ollama-distributed.com"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$binary_remote_addr"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - ollama-distributed.com
    - api.ollama-distributed.com
    secretName: ollama-tls
  rules:
  - host: ollama-distributed.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ollama-api
            port:
              number: 8080
  - host: api.ollama-distributed.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ollama-api
            port:
              number: 8080

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ollama-network-policy
  namespace: ollama-system
  labels:
    app.kubernetes.io/name: ollama-distributed
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: ollama-distributed
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from NGINX ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  # Allow prometheus to scrape metrics
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9090
  # Allow P2P communication between pods
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ollama-distributed
    ports:
    - protocol: TCP
      port: 9000
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow HTTPS outbound (for external APIs, downloads)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
  # Allow database connections
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
  # Allow P2P communication
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ollama-distributed
    ports:
    - protocol: TCP
      port: 9000